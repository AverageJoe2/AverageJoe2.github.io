<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2020/09/04/springboot-tips/"/>
      <url>/2020/09/04/springboot-tips/</url>
      
        <content type="html"><![CDATA[<p>==================springboot=======================<br>ymal - 可配置集合<br>ymal 属性前需要空格</p><p>resource 本身就是classpath<br>classpath:static 放静态资源</p><p>lombok @slfj注解自动生成log对象<br>spring 默认支持hikaricp //spring-boot-starter-jdbc</p><p>mybatis-spring-boot-starter mybatis自己写的版本号必须自己定义</p><p>单表,的sql语句可以使用通用mapper 代码自动生成</p><p>pojo:<br>@id pojo 主键<br>@table (name=”tb_user”)<br>@Transient 代表字段不用持久化</p><p>spring-boot-starter-test</p><p>@Runwith(SpringRunner.class) maper.java直接测试</p><p>======================springcloud=======================<br>soa:dubbo x 强依赖关系,容易引起雪崩效应,服务拆分粒度大</p><p>微服务:<br>服务拆分边界…<br>接口必须时rest风格的,是一种服务架构的风格.http协议的方式.与语言无关平台无关.<br>在线制图工具:<br><a href="https://www.processon.com/">https://www.processon.com/</a></p><p>优势:<br>团队独立/技术独特/前后分离/数据库分离/部署分离<br>rpc dubbo 对服务调用不太灵活不规定双方技术</p><p>springcloud http 灵活对技术不限制.</p><p>resttemplate 底层jdk hhtpurlclient</p><p>maven:<br>dependency:子项目默认自动继承所有依赖<br>dependencyManageyment :子项目需要显示声明依赖并不指定版本才会依赖,指定版本会覆盖父依赖.<br>eureka client: discoveryclient 根据服务id拉取服务列表可以获取ip和port</p><p>本地测试联网ip和问题可以指定prefer-ip-address 127.0.0.1</p><p>相互注册:<br>eureka 启动就把自己注册到eureka上报错</p><p>开发阶段:默认为true<br>register-with-eureka:false</p><p>如果有缓存maven clean &gt;&gt;&gt;build-rebuild</p><p>renew心跳检测时间<br>lease-renewal-interval-in-seconds:30 默认30s<br>lease-expiration-duration-in-seconds:90 服务标记时间认为宕机down<br>失效剔除时间:eureka-server-eviction-interval-in-seconds 30s</p><p>fetch.client.interval-seconds:拉取服务列表间隔时间<br>enable.self.preservation false 缺省打开true.自我保护模式,认为服务好网络问题.<br>关闭服务是出发保护机制15分钟内心跳低于85%才会剔除服务</p><p>-Dserver.port=8080 jvm 参数 可覆盖配置文件</p><p>客户端负载均衡ribbon&gt; resttemplate—&gt;RibbonLoadBanlanceClient </p><p>ribbon:<br>服务名:<br>    ribbon:<br>        NFLoadBalanceerRuleClassName: com.netflix.loadbalancer.XXX</p><p>tomcat 默认200.</p><p>Hystriks 防止雪崩效应.防止阻塞.<br>作用:<br>1,线程隔离,分成不同线程池.<br>2,返回超时设置.<br>3,服务降级(线程池占满)优先保证核心服务.<br>4,服务消费放做降级处理.</p><p>@HystrixCommand (name=,v=)每个方法都要写,可以写成和方法返回值相同.可以定义超时时长</p><p>通用fallback 使用空参.字符串返回值.<br>@DefaultProperties(defaultFallbakc=”fallback_method”)</p><p>根据服务不同定义超时时长</p><p>circuitBreaker.requestVolumeThreshold=10 请求量统计值<br>circuitBreaker.sleepWindowMiliseconds=10000 10秒后重试<br>circuteBreaker.errorThresholdPercentage=50 百分之50错误后熔断器开启.</p><p>zuul网关服务鉴权(1安全控制),2路由,3,负载均衡(从eureka拉去列表),4限流.</p><p>服务网关GatewayApplication 也是一个单独服务<br>@EnableZuulProxy</p><p>zuul.routes: key:value 配置路由规则</p><p>面向服务的路由:</p><p>zuul:<br>    routes:<br>        hehe:#一般写service-id<br>            path: /user-service/**  #请求网关时匹配user-service<br>            url: <a href="http://127.0.0.1:8081/">http://127.0.0.1:8081</a>  #<strong>的匹配会路由到url后面<a href="http://127.0.0.1:8081/">http://127.0.0.1:8081/</a></strong><br>升级url写死:引入eureka url: service-id for  <a href="http://127.0.0.1:8081/">http://127.0.0.1:8081</a><br>eureka:<br>        client:  #作为客户端而可以取eureka拉取服务 列表 service-Id<br>                service-url:<br>                    defaultZone: http:eureka_ip:port/eureka</p><p>zuul 内部引入了ribbon 实现了对service-id对应的服务列表进行负载均衡</p><p>简化后配置:<br>zuul:<br>    routes:<br>        user-service: /user-service/**<br>key:user-service 服务id / value:服务的映射路径 满足映射路径的都会被转到key所对应的服务</p><p>zuul 默认为每一个微服务实现了 可以不配置<br>    user-service: /user-service/** 配置 </p><p>zuul默认配置会把所有的服务都配置好.<br>可以设置忽略..<br>ignored-service:<br>    - consumer-service</p><p>zuul:<br>    routes:<br>        user-service: /user/** 简化配置和默认配置同时可以使用.匹配路径会在mapping时丢失<br>访问真实地址是<a href="http://localhost:10010/user/user/9%E6%89%8D%E8%83%BD%E8%AE%BF%E9%97%AE%E5%88%B0user%E6%9C%8D%E5%8A%A1">http://localhost:10010/user/user/9才能访问到user服务</a></p><p>zuul:<br>    routes:<br>        user-service<br>            path:  /user/**<br>            serviced: user-service #根据服务地址实现负载均衡<br>            strip-prefix :false 匹配路径不去除前缀</p><pre><code>prefix : /api #全局路由前缀strip-prefix :false #保留全局路由前缀一般没用.</code></pre><p>ZuulFilter:<br>preFilter.&gt;&gt; routing Filter&gt;&gt;postFilter</p><p>preFilter:权限控制,限流</p><p>post/exception 通用异常处理</p><p>前端:<br>var for(var i=)<br>定义是全局变量i<br>let 局部<br>const 常量 无法修改</p><p>解构表达式:<br>let arr =[2,3,4,5]<br>let[x,y]=arr;  === let x=arr[0],y=arr[1]<br>let[,,a,b]=arr         a=arr[2],b=arr[3]</p><p>let[,…rest]=arr ===&gt;rest=[3,4,5]<br>let p={name:”jack”,age:21}<br>let {name,age}=p;</p><p>let p={name:”jack”,age:21}<br>let {name:n}=p;&gt;&gt;&gt;n=jack</p><p>let {girl:{name}} =p;<br>{} 解构表达式<br>let {…obj}=p<br>p==obj &gt;&gt;&gt;&gt;false 深层拷贝.</p><p>const add=(a,b)=&gt;a+b   java-&gt;</p><p>定义对象:<br>const p={<br>    key:value,#定义变量<br>    sayHello(){            #定义方式省略函数名<br>        console.log(“hello”);<br>    }<br>}<br>p.sayHello();</p><p>map和reduce</p><p>let arr=[‘1’,’2’,’3’]<br>let arr2=arr.map(s =&gt; parseInt(s)) #<br>arr2.reduce((a,b) =&gt;a+b) 对数组元素做累加<br>arr2.reduce((a,b) =&gt;a*b,0) 指定第一个累乘的元素为0 默认一个个元素</p><p>npm install nrm 镜像切换工具 -g全局</p><p>npm config set registry 私服地址   /nrm add local 私服地址</p><p>nrm ls #查看镜像列表<br>nrm use taobao<br>nrm test npm 测试<br>npm init -y 初始化<br>npm install vue –save 只针对当前项目使用.<br>v-model =”模型属性”  model变属性变属性变双向绑定</p><p>v-text 会转译html成纯文本<br>v-html html渲染<br>事件冒泡:<br>@click.stop=”print(‘button’)”<br>@click.prevent</p><p>v-for:<br>{差值表达式中可以写成js格式 }</p><p>:等同于v-bind &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;:class<br>:class=”{red:isRed,blue:!isRed}”</p><p>data中定义变量isRed=true<br>@click=”isRed=!isRed” 进行属性修改.</p><p>日期格式化:</p><p>#</p><p>data:{<br>birthday:123123213<br>person:{age: 21,<br>name:jack}<br>}<br>computed:{//计算属性<br>    birth(){<br>    const day=new Date(this.birtyday)<br>    day.getFullYear()+”年”+day.getFullMonth+”月”<br>    }<br>},//在方法里面地一个属性进行计算<br>watch:{</p><p>}<br>计算属性只在开始运行一次.</p><p>监控num值的变化:<br>watch:{<br>    num(newValue,oldvalue){  #浅监控<br>        console.log()<br>    }</p><pre><code>person:{ #深度监控    deep:true,    handler(val){        console.log(val.age)    }}</code></pre><p>}</p><div id="app"><counter></counter><counter></counter> 每个组件属性独立<counter></counter></div>Vue组件化开发. vue组件也是一个vue实例<p>Vue.component(“counter”,{  #全局组件定义<br>    template:”&lt;button @click=’count++’&gt;“ #templte中只能有一个根标签<br>    data(){<br>        return count,<br>        return xxx<br>    }<br>})</p><p>const app=new Vue({<br>    el:”#app”,<br>    data{},<br>    componets:{<br>    #局部组件定义 只在#根元素下生效放到vue实例内部<br>        #counter<br>        counter: counter   # es6 key=value 可以简写成 counter<br>    }<br>})</p><p>vuex :组件中通讯和父子间通讯</p><p>父子间通讯:</p><p><code>粘贴html源码不会有拼接</code> 在vue中<br>1,父在子上面绑定事件关联自己的方法<br>2,子:</p><script>const counter ={    template:`    <div>        <button @click="handlAdd">+</button>    </div>    <h1>        Num:    </h1>    # 组件html 不会拼接原样显示`}    props:['num']    methods:{        handleAdd(){            this.$emit('incr'); #实际上促发的式父组件的方法改变num        },    }</script><p>#########################################<br>webpack :<br>1,小文件打包成整体减少请求次数<br>2,将es6语法进行转换编译,兼容老版本浏览器<br>3,代码混淆,提高安全性</p><p>webpack脚手架:vue-cli<br>npm install -g vue-cli<br>ESlint 前端语法校验器.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2020/08/28/jenkins-tips/"/>
      <url>/2020/08/28/jenkins-tips/</url>
      
        <content type="html"><![CDATA[<p>设置jenkins开机自启<br>sudo launchctl load -w /Library/LaunchDaemons/org.jenkins-ci.plist<br>sudo launchctl unload -w /Library/LaunchDaemons/org.jenkins-ci.plist</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2020/08/28/shortcut-tips/"/>
      <url>/2020/08/28/shortcut-tips/</url>
      
        <content type="html"><![CDATA[<p>1,command + shift +delete  :jump to last edit<br>2,F8 step over Shift+F8      Step Out  相当于eclipse的f8跳到下一个断点，也相当于eclipse的f7跳出函数<br>4,vi:<br>$: move to the end of the line<br>f: letter you want jump to the<br>0: jump to the line starter<br>p: paste<br>dw: delete the whole word<br>whole word<br>“sdfjjkdsfkdswhole word”<br>“sdfjjkdsfkdswhole word”<br>“sdfjjkdsfkdswhole word”<br>whole word<br>whole word<br>w:move forward from word to word<br>b:move backwards from back to back<br>yy:copy this line<br>y:copy current selections<br>v:start the select mode<br>n jkml :perform action with n times<br>50,100s/man/MAN哈哈/g:replace man with MAN哈哈 from line 50 to 100 ,s:for search<br>nyy:copy for n lines from current line<br>np paste for n times<br>ndd:delete n lines from current line(include current line )<br>di”:delete all content in “”(“” exclude)<br>da”:delete all content in “”(“” include)<br>df(x):delete from current cursor to letter “x”(include x)<br>dt(x):delete from current cursor to letter “x”(exclude x)<br>gg:jump to the starter of the doc<br>ng:jump to the line n;<br>a:insert after current cursor<br>$:insert at the end of the line($ not for insert!)<br>I:insert at the beginning of the line<br>shift+* :find next selection<br>command+e: open recent open files<br>command + shift+ enter:auto complete<br>control+command + space:maximize current editor window<br>fn+option+&lt;&lt;&lt;:show navigate bar<br>shift+v :select current line<br>v :start selecting mode<br>v +n+g:select from current to line n<br>option +enter:add or optimize import<br>command +l:format :code<br>command +shift +r : rename method<br>command +option+&lt;&lt;:back<br>command +option+&gt;&gt;:forward<br>Edit json:<br>command +1 injectLanguage or reference&gt;&gt;&gt;&gt; command +1 edit Json fragments<br>command shift (+,-,F)<br>command +shift +T:open terminal window<br>command +n :open class file<br>command +shift +n :open file<br>command +shift +a :enter action or option<br>command + alt+v: auto complete variable declaration<br>command + alt+f: auto complete files decariation</p><p>*****command +option +b:jump to implemented class</p><p>command +k find next selection<br>command +shift+K:find previous selection</p><p>****command +shift+M:toggle between branket start and end</p><p>option+M:add book mark<br>option+shift+M :show book marks<br>shift+ esc:close tools window(exclude main editor)<br>psvm:public static void main<br>psf: public static final<br>command +shift +c :copy file path.<br>*****control +option+n :new file you want<br>option+r:open restful Testing tool<br>command+option sublime纵向选择.<br>command+option+i open debug in chrome<br>control+tab switch tab页编辑文件</p><p>F9            resume programe 恢复程序<br>Alt+F10       show execution point 显示执行断点<br>F8            Step Over 相当于eclipse的f6      跳到下一步<br>F7            Step Into 相当于eclipse的f5就是  进入到代码<br>Alt+shift+F7  Force Step Into 这个是强制进入代码<br>Shift+F8      Step Out  相当于eclipse的f8跳到下一个断点，也相当于eclipse的f7跳出函数<br>Atl+F9        Run To Cursor 运行到光标处<br>**<strong><em>ctrl+shift+F9   debug运行java类<br>**</em></strong>ctrl+shift+F10  正常运行java类<br>alt+F8          debug时选中查看值<br>ps -ef|grep java|grep -v grep|cut -c 9-15|xargs kill -9<br>control+enter 什么未抛异常啊没有try catch啊都能搞得定。神器…..<br>command +b:find declaration of current selected the symbol<br>command+u:find upper class declaration<br>add up:<br>n jkml :perform action with n times<br>50,100s/man/MAN哈哈/g:replace man with MAN哈哈 from line 50 to 100 ,s:for search<br>nyy:copy for n lines from current line<br>ndd:delete n lines from current<br>d0:delete to the line starter<br>ctrl+v :select vertically<br>ctrl+v&gt;&gt;&gt;shift+i=I(insert)&gt;&gt;&gt;esc:multip line comments<br>:w filename :save current file to use filename<br>n+x:delete n characters from current<br>d$:delete from current cursor to line end.<br>new xxx().var tab :auto declare variable</p><p><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>GIT</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong><br>git branch -r  查看远程分支<br>git init folder-初始化一个Git仓库文件夹表示要被Git管理<br>git add filename 把文件加入缓存区<br>git status 查看当前仓库中文件状态是否被Git管理<br>git add . 把当前文件夹所有文件加入缓存区<br>git branch 查看当前所在分支<br>git branch branchName 创建一个branckName分支<br>git checkout joe 切换到分支joe<br>git commit -m 提交加注释<br>git merge joe 把Joe分支所修改的内容合并到主分支<br>HEAD 指的是当前分支的一个游标,与当前分支有关当前是哪个分支就是指哪个分支<br>Git diff head 与当前分支做对比<br>git commit -am ‘’添加到缓存区提交并添加注释<br>git clone 把远端仓库克隆到本地<br>git fetch 连接 把远端仓库的内容拿到本地缓存中&gt;&gt;&gt;&gt;Git merge origin master合并到主分支<br>git config –list:查看git配置信息<br>工作区:每一个项目都有一个.git工作区add&gt;&gt;缓存区:修改后commit&gt;&gt;&gt;版本库<br>git reset HEAD &gt;&gt;&gt; git status &gt;&gt;&gt;git commit  -am ‘2’ 1把1不提交,2提交<br>git tag -a v1.0 打标签表明改版不干什么用的.<br>git log –oneline –decorate v1.0查看当前标签作用<br>git log 查看提交提点<br>git tag -a v1.1 提交点id &gt;&gt;&gt;注释:指定具体提交提点打标签<br>git reset –hard  1640ec6 回退到提交点id<br>ssh加密与远端git仓库连接…<br>ssh-keygen -t rsa -C ‘1533360044@qq.com’ :生成密钥进行服务器认真ssh通信贴入SSH KEY<br>git remote add origin <a href="mailto:git@10.13.30.96">git@10.13.30.96</a>:qiao.hu/gitTest.git 创建连接与远程仓库<br>git remote -v 查看连接<br>git config –global user.name “qiao.hu”<br>git config –global user.email “<a href="mailto:1533360044@qq.com">1533360044@qq.com</a>“<br>git fork:把远端的更新加载到本地仓库<br>git pull origin 更新本地仓库<br>Command line instructions<br>Git global setup</p><p>git config –global user.name “qia o.hu”<br>git config –global user.email “<a href="mailto:1533360044@qq.com">1533360044@qq.com</a>“</p><p>Create a new repository</p><p>git clone <a href="mailto:git@10.13.30.96">git@10.13.30.96</a>:qiao.hu/gitTest.git<br>cd gitTest<br>touch README.md<br>git add README.md<br>git commit -m “add README”<br>git push -u origin master<br>git branch 查看所有分支<br>git branch -d dev 删除dev分支<br>git push origin :dev删除远端dev分支</p><p>Existing folder or Git repository</p><p>cd existing_folder<br>git init<br>git remote add origin <a href="mailto:git@10.13.30.96">git@10.13.30.96</a>:qiao.hu/gitTest.git<br>git add .<br>git commit<br>git push -u origin master<br>git reset –hard commit_id<br>git log 查看提交日志<br>grep ‘test’ aa bb cc 　　 #显示在aa，bb，cc文件中包含test的行<br>netstat -anp |grep ssh</p><p>chkconfig –list mysqld:查看mysql服务自启状态<br>chkconfig mysqld on/off:开启关闭自启<br>/etc/rc.local:中可以添加自启脚本<br>command +shit +y :use current selection make memo</p><p>netstat -nat |grep 22 :检查防火墙</p><p>ntsysv /tap查看自启运行任务</p><p>命令导出数据库:<br>mysqldump -uroot -p dbname&gt;xxx.sql</p><p>查看当前用户下的定时任务配置:crontab -u root -l<br>在某目录查找文件:find -name “my*.cnf”<br>netstat -anp |grep ssh<br>scp  -P 1922  <a href="mailto:root@192.168.8.138">root@192.168.8.138</a>:/home/ligh/index.php    <a href="mailto:root@192.168.8.139">root@192.168.8.139</a>:/root<br>unzip “*.zip”<br>替换:<br>sed ‘2s/Version=”[^"]/Version=”2”/‘ test.xml<br><configuration><br>   &lt;Site Name=”site1” Version=”2”” Root=”/var/root1”/&gt;<br>   <site name="site2" version="1" root="/var/root2"><br></site></configuration></p><p>网卡设备名称定义文件:<br>/etc/udev/rules.d/70-persistent-net.rules<br>查看版本 cat /etc/issue<br>netstat -ano|findstr “2181”</p><p>ps -aef | grep /root/tomcat-omsAdmin | grep -v grep | awk ‘{print $2}’</p><p>ps -aef | grep kibana-4.5.0-linux-x64 | grep -v grep | awk ‘{print $2}’</p><p>port 8098</p><p>netstat -anpt | grep LISTEN | grep :5601 | wc -l</p><p>检查端口自动重启:</p><p>#!/bin/bash<br>c=$(netstat -anpt | grep LISTEN | grep :5601 | wc -l)<br>if [ $c -lt 1 ]<br>then</p><h2 id="重启-kibana"><a href="#重启-kibana" class="headerlink" title="重启 kibana"></a>重启 kibana</h2><p>  sh /root/monitor/kibana-4.5.0-linux-x64/bin/kibana &amp;<br>fi</p><p>crontab 每天早上7点 0 7 * * *</p><p>0 7 * * * sh /usr/local/bin/auto_restart_kibana.sh</p><p>crontab -e */10 * * * * /usr/local/bin/auto_restart_kibana.sh</p><p>列出使用当前端口的进程<br>fuser -n tcp 5601<br>netstat -anpt | grep LISTEN | grep :5601<br>修改root用户密码:<br>passwd root</p><p>tomcat7:redeploy -DskipTests<br>查看所有shell类型:<br>cat /etc/shells</p><p>mac shell 切换:<br>chsh -s /bin/zsh<br>echo $SHELL</p><p>mac查看java_home<br>/usr/libexec/java_home -V</p><pre><code>&lt;build&gt;    &lt;plugins&gt;        &lt;plugin&gt;            &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;            &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;            &lt;configuration&gt;                &lt;!-- 当前tomcat实例运行的端口测试使用 --&gt;                &lt;port&gt;8080&lt;/port&gt;                &lt;!-- 当前工程要部署的路径root目录 --&gt;                &lt;path&gt;/&lt;/path&gt;                &lt;!-- tomcat服务器管理url --&gt;                &lt;url&gt;http://192.168.1.66:8080/manager/text&lt;/url&gt;                &lt;!-- tomcat服务器管理账号 --&gt;                &lt;username&gt;tomcat&lt;/username&gt;                &lt;password&gt;tomcat&lt;/password&gt;            &lt;/configuration&gt;        &lt;/plugin&gt;    &lt;/plugins&gt;&lt;/build&gt;</code></pre><p>alt+shift+U toggle letter case</p><p>find . -type f -size +800M</p><p>control+k：删除光标到命令行行尾<br>control+u：删除光标到命令行开始处</p><p>ctr+h  往后删除一字符    ctr+d 往前删除一字符<br>ctr+b  光标往前           ctr+f 往后<br>ctr+u   删除到最前      ctr+K删除到最后<br>ctr+a  光标到最前      ctr+e 光标到最后<br>ctr+p   往上一条历史命令   ctr+n  往下一条命令</p><p>查询当前目录下含有某字串的所有文件<br>find .|xargs grep -ri “报备”<br>打印出文件名<br>find .|xargs grep -ri “IBM” -l </p><p>/Users/kinderice/Pictures/.m2/settings.xml</p><p>activity 生成:<br>bzx -u e00270 -p _pass123 -d</p><p>mysql -死锁线程kill<br>select * from information_schema.innodb_trx;</p><p>kill 110472;</p><p>自动登录配置:<a href="https://www.tecmint.com/ssh-passwordless-login-using-ssh-keygen-in-5-easy-steps/">https://www.tecmint.com/ssh-passwordless-login-using-ssh-keygen-in-5-easy-steps/</a><br>1, ssh-keygen -t rsa</p><p>查看系统网关配置:<br>netstat -r</p><p><a href="http://13.14.100.14:18181/">http://13.14.100.14:18181</a></p><p>-server -XX:PermSize=128M -XX:MaxPermSize=256m</p><p>open . show current folder in finder</p><p>mycli -h 13.14.100.13 -uroot</p><p>fX<br>在一行中向前搜索字符X并跳转<br>FX<br>在一行中向后搜索字符X并跳转</p><p>ctrl+p show all alternative options</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2020/08/28/sql-tip/"/>
      <url>/2020/08/28/sql-tip/</url>
      
        <content type="html"><![CDATA[<p>上面我们提到，使用select…for update会把数据给锁住，不过我们需要注意一些锁的级别，MySQL InnoDB默认行级锁。行级锁都是基于索引的，如果一条SQL语句用不到索引是不会使用行级锁的，会使用表级锁把整张表锁住，这点需要注意。</p><p>select * from information_schema.innodb_trx;<br>kill 1070;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2020/08/28/sublime-tips/"/>
      <url>/2020/08/28/sublime-tips/</url>
      
        <content type="html"><![CDATA[<p>选中 某单词 command +D 选中相同&gt;&gt;同时编辑</p><p>command+shift+d 复制选择内容</p><p>command+l 选中行<br>再使用<br>command+shift+l 进行多行编辑command+l 选中行</p><p>alt+拖动光标选择多行进行编辑</p><p>st: command line redirect to sublime test</p><p>st a.txt sublime open a.txt to edit</p><p>st folder_a open directory with sublime Text</p><p>db.createUser({user: “test”, pwd: “123456”, roles: [{ role: “dbOwner”, db: “dialogflow” }]})</p><p>Ctrl+H:replace</p><p>ctrl+shift+p<br>install package<br>name the plugin you want</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2020/08/28/vbox-tips/"/>
      <url>/2020/08/28/vbox-tips/</url>
      
        <content type="html"><![CDATA[<p>chmod +x rc.local<br>/etc/rc.local 中添加开机自启<br>chmod 777 /root/share<br>sudo mount -t vboxsf Share /root/share</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2020/08/28/vi-tips/"/>
      <url>/2020/08/28/vi-tips/</url>
      
        <content type="html"><![CDATA[<p>进入vi的命令 ：<br>vi +/pattern filename：打开文件，并将光标置于第一个与pattern匹配的串处<br>vi -r filename ：在上次正用vi编辑时发生系统崩溃，恢复filename<br>vi filename….filename ：打开多个文件，依次进行编辑</p><p>移动光标类命令:<br>k或Ctrl+p：光标上移一行<br>j或Ctrl+n ：光标下移一行<br>Enter ：光标下移一行<br>e或E ：光标右移一个字至字尾<br>) ：光标移至句尾<br>( ：光标移至句首<br>}：光标移至段落开头<br>{：光标移至段落结尾<br>n+：光标下移n行<br>n-：光标上移n行<br>n$：光标移至第n行尾<br>H ：光标移至屏幕顶行<br>M ：光标移至屏幕中间行<br>L ：光标移至屏幕最后行<br>0：（注意是数字零）光标移至当前行首<br>$：光标移至当前行尾</p><p>屏幕翻滚类命令:<br>Ctrl+u：向文件首翻半屏<br>Ctrl+d：向文件尾翻半屏<br>Ctrl+f：向文件尾翻一屏<br>Ctrl＋b；向文件首翻一屏<br>nz：将第n行滚至屏幕顶部，不指定n时将当前行滚至屏幕顶部。</p><p>插入文本类命令 ：<br>i ：在光标前<br>I ：在当前行首<br>R：替换当前字符及其后的字符，直至按ESC键<br>s：从当前光标位置处开始，以输入的文本替代指定数目的字符<br>S：删除指定数目的行，并以所输入文本代替之<br>ncw或nCW：修改指定数目的字<br>nCC：修改指定数目的行</p><p>删除命令：<br>ndw或ndW：删除光标处开始及其后的n-1个字<br>do：删至行首<br>d$：删至行尾<br>ndd：删除当前行及其后n-1行<br>x或X：删除一个字符，x删除光标后的，而X删除光标前的<br>Ctrl+u：删除输入方式下所输入的文本</p><p>搜索及替换命：<br>/pattern：从光标开始处向文件尾搜索pattern<br>?pattern：从光标开始处向文件首搜索pattern<br>n：在同一方向重复上一次搜索命令<br>N：在反方向上重复上一次搜索命令<br>：s/p1/p2/g：将当前行中所有p1均用p2替代<br>：n1,n2s/p1/p2/g：将第n1至n2行中所有p1均用p2替代<br>：g/p1/s//p2/g：将文件中所有p1均用p2替换</p><p>选项设置：<br>all：列出所有选项设置情况<br>term：设置终端类型<br>ignorance：在搜索中忽略大小写<br>list：显示制表位(Ctrl+I)和行尾标志（$)<br>number：显示行号<br>report：显示由面向行的命令修改过的数目<br>terse：显示简短的警告信息<br>warn：在转到别的文件时若没保存当前文件则显示NO write信息<br>nomagic：允许在搜索模式中，使用前面不带“\”的特殊字符<br>nowrapscan：禁止vi在搜索到达文件两端时，又从另一端开始<br>mesg：允许vi显示其他用户用write写到自己终端上的信息</p><p>最后行方式命：<br>：n1,n2 co n3：将n1行到n2行之间的内容拷贝到第n3行下<br>：n1,n2 m n3：将n1行到n2行之间的内容移至到第n3行下<br>：n1,n2 d ：将n1行到n2行之间的内容删除<br>：w ：保存当前文件<br>：e filename：打开文件filename进行编辑<br>：x：保存当前文件并退出<br>：q：退出vi<br>：q!：不保存文件并退出vi<br>：!command：执行shell命令command<br>：n1,n2 w!command：将文件中n1行至n2行的内容作为command的输入并执行之，若不指定n1，n2，则表示将整个文件内容作为command的输入<br>：r!command：将命令command的输出结果放到当前行</p><p>寄存器操作<br>“?nyy：将当前行及其下n行的内容保存到寄存器？中，其中?为一个字母，n为一个数字<br>“?nyw：将当前行及其下n个字保存到寄存器？中，其中?为一个字母，n为一个数字<br>“?nyl：将当前行及其下n个字符保存到寄存器？中，其中?为一个字母，n为一个数字<br>“?p：取出寄存器？中的内容并将其放到光标位置处。这里？可以是一个字母，也可以是一个数字<br>ndd：将当前行及其下共n行文本删除，并将所删内容放到1号删除寄存器中。</p><p>VI常用技巧</p><p>VI命令可以说是Unix/Linux世界里最常用的编辑文件的命令了，但是因为它的命令集众多，很多人都不习惯使用它，其实您只需要掌握基本命令，然后加以灵活运用，就会发现它的优势，并会逐渐喜欢使用这种方法。本文旨在介绍VI的一些最常用命令和高级应用技巧。</p><p>一、基本命令介绍</p><p> 1．光标命令</p><p>k、j、h、l——上、下、左、右光标移动命令。虽然您可以在Linux中使用键盘右边的4个光标键，但是记住这4个命令还是非常有用的。这4个键正是右手在键盘上放置的基本位置。<br>nG——跳转命令。n为行数，该命令立即使光标跳到指定行。<br>Ctrl+G——光标所在位置的行数和列数报告。<br>w、b——使光标向前或向后跳过一个单词。<br> 2．编辑命令<br>i、a、r——在光标的前、后以及所在处插入字符命令(i=insert、a=append、r=replace)。<br>cw、dw——改变(置换)/删除光标所在处的单词的命令 (c=change、d=delete)。<br>x、d$、dd——删除一个字符、删除光标所在处到行尾的所有字符以及删除整行的命令。<br> 3．查找命令<br> /string、?string——从光标所在处向后或向前查找相应的字符串的命令。<br> 4．拷贝复制命令<br> yy、p——拷贝一行到剪贴板或取出剪贴板中内容的命令。</p><p>二、常见问题及应用技巧</p><p> 1．在一个新文件中读/etc/passwd中的内容，取出用户名部分。<br> vi file<br> :r /etc/passwd 在打开的文件file中光标所在处读入/etc/passwd<br> :%s/:.*//g 删除/etc/passwd中用户名后面的从冒号开始直到行尾的所有部分。<br> 您也可以在指定的行号后读入文件内容，例如使用命令“:3r /etc/passwd”从新文件的第3行开始读入 /etc/passwd的所有内容。<br> 我们还可以使用以下方法删掉文件中所有的空行及以#开始的注释行。<br> #cat squid.conf.default | grep -v ^$ | grep -v ^#</p><p> 2．在打开一个文件编辑后才知道登录的用户对该文件没有写的权限，不能存盘，需要将所做修改存入临时文件。<br> vi file<br> :w /tmp/1 保存所做的所有修改，也可以将其中的某一部分修改保存到临时文件，例如仅仅把第20〜59行之间的内容存盘成文件/tmp/1，我们可以键入如下命令。<br> vi file<br> :20,59w /tmp/1</p><p> 3．用VI编辑一个文件，但需要删除大段的内容。<br> 首先利用编辑命令“vi file”打开文件，然后将光标移到需要删除的行处按Ctrl+G显示行号，再到结尾处再按Ctrl+G，显示文件结尾的行号。<br> :23,1045d 假定2次得到的行号为23和1045，则把这期间的内容全删除，也可以在要删除的开始行和结束行中用ma、mb命令标记，然后利用“:a,bd”命令删除。</p><p> 4．在整个文件的各行或某几行的行首或行尾加一些字符串。<br> vi file<br> :3,$s/^/some string / 在文件的第一行至最后一行的行首插入“some string”。<br> :%s/$/some string/g 在整个文件每一行的行尾添加“some string”。<br> :%s/string1/string2/g 在整个文件中替换“string1”成“string2”。<br> :3,7s/string1/string2/ 仅替换文件中的第3行到第7行中的“string1”成“string2”。<br> 注意: 其中s为substitute，%表示所有行，g表示global。</p><p> 5．同时编辑2个文件，拷贝一个文件中的文本并粘贴到另一个文件中。<br> vi file1 file2<br> yy 在文件1的光标处拷贝所在行<br> :n 切换到文件2 (n=next)<br> p 在文件2的光标所在处粘贴所拷贝的行<br> :n 切换回文件1</p><p> 6．替换文件中的路径。<br> 使用命令“:%s#/usr/bin#/bin#g”可以把文件中所有路径/usr/bin换成/bin。也可以使用命令“:%s//usr/bin//bin/g”实现，其中“”是转义字符，表明其后的“/”字符是具有实际意义的字符，不是分隔符。</p><p>ctrl+p :变量提示自动补全</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2020/08/28/docker-tips/"/>
      <url>/2020/08/28/docker-tips/</url>
      
        <content type="html"><![CDATA[<p>启动docker服务:<br>service docker start</p><p>命令启动mysql容器 并设置密码:<br>docker run –name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root -d mysql</p><p>docker 中运行的镜像进程:<br>docker ps -l</p><p>宿主机的url/ip<br>docker-machine ls<br>tcp://192.168.99.100:2376<br>docker-machine ip default</p><p>查看容器配置:<br>docker inspect f5d9260ac2a2</p><p>5.进入容器</p><p>docker exec -it 0b7737e0e3c5 /bin/bash</p><p>查看mysql所有配置文件路径:<br>/etc/mysql/mysql.conf.d/mysqld.cnf</p><p>设置server字符编码<br>character-set-server = utf8</p><p>echo  character-set-server = utf8 &gt;&gt; /etc/mysql/mysql.conf.d/mysqld.cnf</p><p>停止并删除容器<br>docker stop f5d9260ac2a2<br>docker rm e1066fe2db35</p><p>mysql -uroot -p -h192.168.99.100 -P3306</p><p>mysql允许任意IP连接 user<br>root host %</p><p>重启服务:<br>service mysql restart</p><p>导出mysql数据<br>mysqldump -uroot -p YourDatabaseName &gt; wantedsqlfile.sql</p><p>编辑容器中文件<br>vim scp://remoteuser@containerip//path/to/document</p><p>vim scp://root@192.168.99.100//usr/local/tomcat/webapps/manager/META-INF/context.xml</p><p>把文件cp到宿主机修改:<br>docker cp tomcat-manager:/usr/local/tomcat/webapps/manager/META-INF/context.xml  /Users/kinderice/Pictures/docker/path_to_edit/tomcat-users.xml<br>修改后传到容器:<br>docker cp /Users/kinderice/Pictures/docker/path_to_edit/tomcat-users.xml  tomcat-manager:/usr/local/tomcat/webapps</p><p>查看docker容器信息:<br>docker info</p><p>docker账号和密码:<br>user: docker<br>pass: tcuser</p><p>停用网卡:<br>ifconfig tun0 down</p><p>阿里云镜像加速:<br><a href="https://1yguejoq.mirror.aliyuncs.com/">https://1yguejoq.mirror.aliyuncs.com</a></p><p>docker ps :查看容器名字<br>tomcat-manager</p><p>docker日志:<br>./var/log/messages</p><p>动态查看docker容器日志:<br>docker logs –tail 50 –follow –timestamps 72b752d208db</p><p>storage<br>rm /var/fdfs/storage/data/fdfs_storaged.pid</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2020/08/28/git-shortcuts-tips/"/>
      <url>/2020/08/28/git-shortcuts-tips/</url>
      
        <content type="html"><![CDATA[<p>gd - git diff<br>gdc - git diff –cached<br>gdv - git diff -w “$@” | view<br>gc - git commit -v<br>gc! - git commit -v –amend<br>gca - git commit -v -a<br>gca! - git commit -v -a –amend<br>gcmsg - git commit -m<br>gco - git checkout<br>gcm - git checkout master<br>gr - git remote<br>grv - git remote -v<br>grmv - git remote rename<br>grrm - git remote remove<br>gsetr - git remote set-url<br>grup - git remote update<br>grbi - git rebase -i<br>grbc - git rebase –continue<br>grba - git rebase –abort<br>gb - git branch<br>gba - git branch -a<br>gcount - git shortlog -sn<br>gcl - git config –list<br>gcp - git cherry-pick<br>glg - git log –stat –max-count=10<br>glgg - git log –graph –max-count=10<br>glgga - git log –graph –decorate –all<br>glo - git log –oneline –decorate –color<br>glog - git log –oneline –decorate –color –graph<br>gss - git status -s<br>ga - git add<br>gm - git merge<br>grh - git reset HEAD<br>grhh - git reset HEAD –hard<br>gclean - git reset –hard &amp;&amp; git clean -dfx<br>gwc - git whatchanged -p –abbrev-commit –pretty=medium<br>gsts - git stash show –text<br>gsta - git stash<br>gstp - git stash pop<br>gstd - git stash drop<br>ggpull - git pull origin $(current_branch)<br>ggpur - git pull –rebase origin $(current_branch)<br>ggpush - git push origin $(current_branch)<br>ggpnp - git pull origin $(current_branch) &amp;&amp; git push origin $(current_branch)<br>glp - _git_log_prettily</p><p>设置远端分支的与本地分支的关联:<br>git branch –set-upstream-to=origin/dev_joe </p><p>将游离状态指向新分支:<br>git checkout -b joe-omsAdmin-1020</p><p>Question:</p><h1 id="Your-branch-and-‘origin-master’-have-diverged"><a href="#Your-branch-and-‘origin-master’-have-diverged" class="headerlink" title="Your branch and ‘origin/master’ have diverged,"></a>Your branch and ‘origin/master’ have diverged,</h1><h1 id="and-have-3-and-8-different-commits-each-respectively"><a href="#and-have-3-and-8-different-commits-each-respectively" class="headerlink" title="and have 3 and 8 different commits each, respectively."></a>and have 3 and 8 different commits each, respectively.</h1><h1 id="use-“git-pull”-to-merge-the-remote-branch-into-yours"><a href="#use-“git-pull”-to-merge-the-remote-branch-into-yours" class="headerlink" title="(use “git pull” to merge the remote branch into yours)"></a>(use “git pull” to merge the remote branch into yours)</h1><p>Resolve:</p><p>git fetch origin<br>git reset –hard origin/master</p><p>2.先删后加<br>git remote rm origin<br>git remote add origin [url]</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2020/08/28/storm-tips/"/>
      <url>/2020/08/28/storm-tips/</url>
      
        <content type="html"><![CDATA[<p>hadoop非实时计算体验不好.mapper/reduce /批处理而生<br>storm:实时计算 监控预警/婚恋网/推荐<br>hive : sql语句<br>====================================<br>优点:<br>低延迟//高性能//消息不丢失//消息有序//高容错</p><p>缺点:<br>单点  nimbus,编译语言维护成本高clojure</p><p>工作节点都运行了一个supervisor守护进程</p><p>快速失败:自动重启</p><h1 id="nimbus-单点-主节点-分配代码-布置任务-故障检查"><a href="#nimbus-单点-主节点-分配代码-布置任务-故障检查" class="headerlink" title="nimbus 单点:主节点 分配代码,布置任务,故障检查"></a>nimbus 单点:主节点 分配代码,布置任务,故障检查</h1><p>nimbus和工作进程之间由zk协调</p><p>应用组件名字:topology 部署应用拓扑消息流动<br>nimbus<br>Spout 外部数据读取主动角色 nextTuple()死循环<br>bolt 执行一个处理的组件所有操作被动角色executeTuple()<br>Tuple 相当于Valuelist<br>Stream: 源源不断的tuple<br>worker 进程 每一个进程有一个端口对应<br>supervisor<br>task:worker 中每一个spout/bolt 的线程</p><p>storm使用场景:<br>1,流聚合<br>2,批处理<br>3,读tuple 发多个或一个tuple<br>4,IbasicBolt execute(),ack()<br>5,Fields grouping组合<br>6,连接缓存短连接转换长连接</p><p>分组机制:<br> 1, Strem Grouping 一个流在bolt任务之间的切分规则.<br> 随机分组<br> 字段分组 指定字段分发bolt 哈希区域<br> allgroup :tuple 复制分组到所有bolt<br> 无分组 等同于随机分组 最终storm会把所有的无分组放到订阅的同一线程中运行<br> 直接分组:生产者决定tuple由那个bolt接收<br> 还可以实现customeStreamGrouping自己定义分组</p><p>storm ui :集群拓扑部署查看</p><p>停止:<br>nimbus 上运行<br>./storm kill  topology-name</p><p>BasicBolt 不用关心ack/fail</p><p>emit:发送到下一个节点</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2020/08/28/teamviewer-crack/"/>
      <url>/2020/08/28/teamviewer-crack/</url>
      
        <content type="html"><![CDATA[<p>teamviewer 刷新mac地址:<br>/Users/AverageJoe/Devs/idea/gitSource/mac-teamviewer-crack<br>sudo python TeamViewer-id-changer.py\</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2020/08/28/python-tips/"/>
      <url>/2020/08/28/python-tips/</url>
      
        <content type="html"><![CDATA[<p>opt目录任何用户都有权限</p><h1 id="注释需要空格单行注释一个空格"><a href="#注释需要空格单行注释一个空格" class="headerlink" title="注释需要空格单行注释一个空格"></a>注释需要空格单行注释一个空格</h1><p>code  #单行注释可以放在当前行后面如果注释很短两个空格<br>运算符：<br>//取整<br><strong>次幂计算2</strong>3=8</p><p>变量：<br>变量第一次出现定义变量第二次修改变量</p><p>定义变量时python变量的类型是由等号右边的类型自动确定</p><p>数据类型：</p><p>0=False  非零=True   非零既真</p><p>复数型 ：科学计算</p><p>python2 中有int 和long 区分</p><p>python3 只有int类型</p><p> bool类型：<br> True&gt;&gt;&gt;1<br> False&gt;&gt;&gt;0</p><p> str1+str2 字符串相加等于拼接字符串</p><p>字符串变量可以用 * +  不能与数字运算</p><p>变量的输入：</p><p>input()的输入类型都是字符串类型的</p><p>类型转换函数：</p><p>int(“22”)<br>float（”2.3”） </p><p>格式化字符%：<br>s &gt;字符串<br>d &gt;num<br>f &gt;float<br>%% &gt;%</p><p>多值格式化 %（变量1，变量2….）</p><p>%.2f 表示小数点后面显示2位</p><p>%06d :表示输出展示整数的位数6位不足补0</p><p>scale=0.25<br>print(“数据比利是：%.2f%%”%(scale*100))</p><blockquote><blockquote><blockquote><blockquote><p>25%</p></blockquote></blockquote></blockquote></blockquote><p>变量命名：<br>关键字：<br>import keyword<br>print(keyword.kwlist)<br>推荐：下划线分割多个单词<br>可以驼峰命名</p><p>python2不等于可以有&lt;&gt; !=</p><p>相同缩进代表同一个代码块</p><p>相同数据类型才能进行大小比较</p><p>逻辑运算符：</p><p>and or 与或<br>非not 条件 :对条件取反</p><p>if critera1:<br>    do sth<br>elif critera2:<br>    do another..<br>elif critera3:<br>    do another…<br>else:<br>    none of above doing</p><p>if() or () or ():&gt;&gt;&gt;&gt;or条件换行</p><p>if(()<br>    or()<br>    or()):<br>编辑器自动换行: \ 不用添加括号</p><p>import 工具包在文件开头方便下面的代码调用</p><p>\转译字符<br>" &gt;&gt;”<br>'&gt;&gt;’<br>\&gt;&gt; <br>\r &gt;&gt; 回车</p><p>import while_test 导入自己写的工具包</p><p>def:定义函数<br>def functionName():<br>        “””函数文档注释 “””<br>函数是先定义再调用 python是从上到下执行</p><p>函数定义上方空两行</p><p>按住ctrl可以查看函数注释</p><p>###################################################################</p><p>python setup.py build 打包 exe </p><p>pip install -r C:\projects\flaskmongouserlogintemplate\requirements.txt</p><p>list(map(lambda x:str(x),auths))</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2020/08/28/windows-tips/"/>
      <url>/2020/08/28/windows-tips/</url>
      
        <content type="html"><![CDATA[<p>最小化当前窗口：<br>alt+esc<br>ctrl+d ===ctrl+c 退出<br>alt+f4 close current window<br>ctrl+W close tab<br>win+m minimum window<br>win+D show desktop</p><p>chrome F12 developer mode</p><p>netstat -aon|findstr “49157”</p><p>netstat -ano | findstr “:80 “</p><p>delete service after program remvoed<br>sc delete MySQL </p><p>set JAVA_HOME=C:\Program Fiels (x86)\Java\jre1.8.0_171</p><p>netstat -anb 查看端口占用</p><p>taskkill /IM iexplore.exe /F</p><p>systeminfo</p><p>find . -name “*.css”|xargs grep -n “yun.ae8e0024.png”</p><p>netstat -aon|findstr “8070”<br>taskkill /pid 6128 /t /f</p><p>run on start folder:<br>C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp<br>alt + esc minimize window</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2020/08/28/vpn/"/>
      <url>/2020/08/28/vpn/</url>
      
        <content type="html"><![CDATA[<p>#!/bin/sh</p><p>yum install docker -y&amp;&amp;service docker start&amp;&amp;chkconfig docker on&amp;&amp;docker pull oddrationale/docker-shadowsocks&amp;&amp;docker run -d -p 17330:17330  –restart=always oddrationale/docker-shadowsocks -s 0.0.0.0 -p 17330 -k _pass123 -m aes-256-cfb&amp;&amp;yum update -y&amp;&amp;rpm –import <a href="https://www.elrepo.org/RPM-GPG-KEY-elrepo.org&amp;&amp;rpm">https://www.elrepo.org/RPM-GPG-KEY-elrepo.org&amp;&amp;rpm</a> -Uvh <a href="http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm&amp;&amp;echo">http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm&amp;&amp;echo</a> y | yum –enablerepo=elrepo-kernel install kernel-ml&amp;&amp;grub2-set-default 1&amp;&amp;echo y |yum install expect&amp;&amp;expect &lt;&lt;EOF<br>set timeout -1<br>spawn ssh-keygen -t rsa<br>expect “(/root/.ssh/id_rsa):”<br>send “\r”<br>expect “(empty for no passphrase):”<br>send “\r”<br>expect “again:”<br>send “\r”<br>expect eof<br>EOF<br>echo “ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDMfSgrbnmp10p2F2YenvFLfPQPwyJ1DrSWBh9G4u0iE1PolSxESFFHv0UWpoCfdCs9Rwg385zpq4gRDZIkFbZJ583KPB7EKD4PfzJ1Lzgs5hRXQxIFxYvmvEGvXwoBVJ9WAnl21FVO6bAuBhYbLx+hTBac3MZc9dfFcycBFyjVWKMAM7HuecR6nn9JM8jMWZokqg33uOhMWVaIF7vpq1S302B9BLx737Fn+fnASCjjLl8ZUxizBJI7b4lELNbM30DWtA9yDz8Ds+FPE1LtSKdA2Hi0r8QJ+3xC6f/QJ3c/Fe55tlvAr1UDoxUqVpSavJwHWOx9o61XvOIAaau/7HEj <a href="mailto:1533360044@qq.com">1533360044@qq.com</a>“ &gt; /root/.ssh/authorized_keys&amp;&amp;chmod 700 .ssh&amp;&amp;chmod 600 .ssh/authorized_keys&amp;&amp;reboot</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2020/08/28/node-js-tips/"/>
      <url>/2020/08/28/node-js-tips/</url>
      
        <content type="html"><![CDATA[<p>angular:<br>grunt serve 启动前端web界面 </p><p>bower install angular#1.6.9 –save</p><p>node:<br>npm start </p><p>bower install <a href="mailto:angular@1.6.9">angular@1.6.9</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2020/08/28/linux-command-tips/"/>
      <url>/2020/08/28/linux-command-tips/</url>
      
        <content type="html"><![CDATA[<p>echo $SHELL</p><p>chsh -s /bin/zsh</p><p>cmd&gt;&gt;bash切换至：<br>bash on Ubuntu on Windows</p><p>gi first search box focus</p><p>which 查看命令位置</p><p>ls -lh 可查看文件大小</p><p>环境变量系统路径<br>echo $PATH<br>递归删除某后缀文件<br>find . -name “*.pyc”  | xargs rm -f</p><p>curl -O #download </p><p>getconf LONG_BIT</p><p>cat /etc/redhat-release</p><p>#查看哪个应用占用某端口:<br> ss -lpn src :22122</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2020/08/28/vpm-tips/"/>
      <url>/2020/08/28/vpm-tips/</url>
      
        <content type="html"><![CDATA[<p>#!/bin/sh</p><p>yum install docker -y&amp;&amp;service docker start&amp;&amp;chkconfig docker on&amp;&amp;docker pull oddrationale/docker-shadowsocks&amp;&amp;docker run -d -p 17330:17330  –restart=always oddrationale/docker-shadowsocks -s 0.0.0.0 -p 17330 -k _pass123 -m aes-256-cfb&amp;&amp;yum update -y&amp;&amp;rpm –import <a href="https://www.elrepo.org/RPM-GPG-KEY-elrepo.org&amp;&amp;rpm">https://www.elrepo.org/RPM-GPG-KEY-elrepo.org&amp;&amp;rpm</a> -Uvh <a href="http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm&amp;&amp;echo">http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm&amp;&amp;echo</a> y | yum –enablerepo=elrepo-kernel install kernel-ml&amp;&amp;grub2-set-default 1&amp;&amp;echo y |yum install expect&amp;&amp;expect &lt;&lt;EOF<br>set timeout -1<br>spawn ssh-keygen -t rsa<br>expect “(/root/.ssh/id_rsa):”<br>send “\r”<br>expect “(empty for no passphrase):”<br>send “\r”<br>expect “again:”<br>send “\r”<br>expect eof<br>EOF<br>echo “ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDMfSgrbnmp10p2F2YenvFLfPQPwyJ1DrSWBh9G4u0iE1PolSxESFFHv0UWpoCfdCs9Rwg385zpq4gRDZIkFbZJ583KPB7EKD4PfzJ1Lzgs5hRXQxIFxYvmvEGvXwoBVJ9WAnl21FVO6bAuBhYbLx+hTBac3MZc9dfFcycBFyjVWKMAM7HuecR6nn9JM8jMWZokqg33uOhMWVaIF7vpq1S302B9BLx737Fn+fnASCjjLl8ZUxizBJI7b4lELNbM30DWtA9yDz8Ds+FPE1LtSKdA2Hi0r8QJ+3xC6f/QJ3c/Fe55tlvAr1UDoxUqVpSavJwHWOx9o61XvOIAaau/7HEj <a href="mailto:1533360044@qq.com">1533360044@qq.com</a>“ &gt; /root/.ssh/authorized_keys&amp;&amp;chmod 700 .ssh&amp;&amp;chmod 600 .ssh/authorized_keys&amp;&amp;reboot</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2020/08/18/mac-tips/"/>
      <url>/2020/08/18/mac-tips/</url>
      
        <content type="html"><![CDATA[<p>nginx -h<br>nginx -s  stop</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2020/08/14/php/"/>
      <url>/2020/08/14/php/</url>
      
        <content type="html"><![CDATA[<p>apache默认服务器安装目录:<br>/etc/apache2<br>命令<br>sudo apachectl start     //开始<br>sudo apachectl restart   //重启<br>sudo apachectl stop      //停止</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>重来</title>
      <link href="/2020/08/07/diary/feelings/"/>
      <url>/2020/08/07/diary/feelings/</url>
      
        <content type="html"><![CDATA[<p>​        每当这个时候总是应该停下来好好整理一下心情.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> dairy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客主题最全展示</title>
      <link href="/2018/09/07/ge-shi-zui-quan-zhan-shi/"/>
      <url>/2018/09/07/ge-shi-zui-quan-zhan-shi/</url>
      
        <content type="html"><![CDATA[<p>最全展示!</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> blog-tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
