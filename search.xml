<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>1030</title>
      <link href="2020/10/30/diary/2020/1030/"/>
      <url>2020/10/30/diary/2020/1030/</url>
      
        <content type="html"><![CDATA[<p><a href="bPw0COdWK3U.jpg">图片1</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>diary shortcuts</title>
      <link href="2020/09/10/diary/diary-tips/"/>
      <url>2020/09/10/diary/diary-tips/</url>
      
        <content type="html"><![CDATA[<p>创建带有文件目录的.md文档<br>hexo n 1030.md<br>Attach img!</p><p><a href="%E5%9B%BE%E7%89%871.png">图片1</a></p>]]></content>
      
      
      <categories>
          
          <category> diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> diary-tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2020/09/04/springboot-tips/"/>
      <url>2020/09/04/springboot-tips/</url>
      
        <content type="html"><![CDATA[<p>==================springboot=======================<br>ymal - 可配置集合<br>ymal 属性前需要空格</p><p>resource 本身就是classpath<br>classpath:static 放静态资源</p><p>lombok @slfj注解自动生成log对象<br>spring 默认支持hikaricp //spring-boot-starter-jdbc</p><p>mybatis-spring-boot-starter mybatis自己写的版本号必须自己定义</p><p>单表,的sql语句可以使用通用mapper 代码自动生成</p><p>pojo:<br>@id pojo 主键<br>@table (name=”tb_user”)<br>@Transient 代表字段不用持久化</p><p>spring-boot-starter-test</p><p>@Runwith(SpringRunner.class) maper.java直接测试</p><p>======================springcloud=======================<br>soa:dubbo x 强依赖关系,容易引起雪崩效应,服务拆分粒度大</p><p>微服务:<br>服务拆分边界…<br>接口必须时rest风格的,是一种服务架构的风格.http协议的方式.与语言无关平台无关.<br>在线制图工具:<br><a href="https://www.processon.com/">https://www.processon.com/</a></p><p>优势:<br>团队独立/技术独特/前后分离/数据库分离/部署分离<br>rpc dubbo 对服务调用不太灵活不规定双方技术</p><p>springcloud http 灵活对技术不限制.</p><p>resttemplate 底层jdk hhtpurlclient</p><p>maven:<br>dependency:子项目默认自动继承所有依赖<br>dependencyManageyment :子项目需要显示声明依赖并不指定版本才会依赖,指定版本会覆盖父依赖.<br>eureka client: discoveryclient 根据服务id拉取服务列表可以获取ip和port</p><p>本地测试联网ip和问题可以指定prefer-ip-address 127.0.0.1</p><p>相互注册:<br>eureka 启动就把自己注册到eureka上报错</p><p>开发阶段:默认为true<br>register-with-eureka:false</p><p>如果有缓存maven clean &gt;&gt;&gt;build-rebuild</p><p>renew心跳检测时间<br>lease-renewal-interval-in-seconds:30 默认30s<br>lease-expiration-duration-in-seconds:90 服务标记时间认为宕机down<br>失效剔除时间:eureka-server-eviction-interval-in-seconds 30s</p><p>fetch.client.interval-seconds:拉取服务列表间隔时间<br>enable.self.preservation false 缺省打开true.自我保护模式,认为服务好网络问题.<br>关闭服务是出发保护机制15分钟内心跳低于85%才会剔除服务</p><p>-Dserver.port=8080 jvm 参数 可覆盖配置文件</p><p>客户端负载均衡ribbon&gt; resttemplate—&gt;RibbonLoadBanlanceClient </p><p>ribbon:<br>服务名:<br>    ribbon:<br>        NFLoadBalanceerRuleClassName: com.netflix.loadbalancer.XXX</p><p>tomcat 默认200.</p><p>Hystriks 防止雪崩效应.防止阻塞.<br>作用:<br>1,线程隔离,分成不同线程池.<br>2,返回超时设置.<br>3,服务降级(线程池占满)优先保证核心服务.<br>4,服务消费放做降级处理.</p><p>@HystrixCommand (name=,v=)每个方法都要写,可以写成和方法返回值相同.可以定义超时时长</p><p>通用fallback 使用空参.字符串返回值.<br>@DefaultProperties(defaultFallbakc=”fallback_method”)</p><p>根据服务不同定义超时时长</p><p>circuitBreaker.requestVolumeThreshold=10 请求量统计值<br>circuitBreaker.sleepWindowMiliseconds=10000 10秒后重试<br>circuteBreaker.errorThresholdPercentage=50 百分之50错误后熔断器开启.</p><p>zuul网关服务鉴权(1安全控制),2路由,3,负载均衡(从eureka拉去列表),4限流.</p><p>服务网关GatewayApplication 也是一个单独服务<br>@EnableZuulProxy</p><p>zuul.routes: key:value 配置路由规则</p><p>面向服务的路由:</p><p>zuul:<br>    routes:<br>        hehe:#一般写service-id<br>            path: /user-service/**  #请求网关时匹配user-service<br>            url: <a href="http://127.0.0.1:8081/">http://127.0.0.1:8081</a>  #<strong>的匹配会路由到url后面<a href="http://127.0.0.1:8081/">http://127.0.0.1:8081/</a></strong><br>升级url写死:引入eureka url: service-id for  <a href="http://127.0.0.1:8081/">http://127.0.0.1:8081</a><br>eureka:<br>        client:  #作为客户端而可以取eureka拉取服务 列表 service-Id<br>                service-url:<br>                    defaultZone: http:eureka_ip:port/eureka</p><p>zuul 内部引入了ribbon 实现了对service-id对应的服务列表进行负载均衡</p><p>简化后配置:<br>zuul:<br>    routes:<br>        user-service: /user-service/**<br>key:user-service 服务id / value:服务的映射路径 满足映射路径的都会被转到key所对应的服务</p><p>zuul 默认为每一个微服务实现了 可以不配置<br>    user-service: /user-service/** 配置 </p><p>zuul默认配置会把所有的服务都配置好.<br>可以设置忽略..<br>ignored-service:<br>    - consumer-service</p><p>zuul:<br>    routes:<br>        user-service: /user/** 简化配置和默认配置同时可以使用.匹配路径会在mapping时丢失<br>访问真实地址是<a href="http://localhost:10010/user/user/9%E6%89%8D%E8%83%BD%E8%AE%BF%E9%97%AE%E5%88%B0user%E6%9C%8D%E5%8A%A1">http://localhost:10010/user/user/9才能访问到user服务</a></p><p>zuul:<br>    routes:<br>        user-service<br>            path:  /user/**<br>            serviced: user-service #根据服务地址实现负载均衡<br>            strip-prefix :false 匹配路径不去除前缀</p><pre><code>prefix : /api #全局路由前缀strip-prefix :false #保留全局路由前缀一般没用.</code></pre><p>ZuulFilter:<br>preFilter.&gt;&gt; routing Filter&gt;&gt;postFilter</p><p>preFilter:权限控制,限流</p><p>post/exception 通用异常处理</p><p>前端:<br>var for(var i=)<br>定义是全局变量i<br>let 局部<br>const 常量 无法修改</p><p>解构表达式:<br>let arr =[2,3,4,5]<br>let[x,y]=arr;  === let x=arr[0],y=arr[1]<br>let[,,a,b]=arr         a=arr[2],b=arr[3]</p><p>let[,…rest]=arr ===&gt;rest=[3,4,5]<br>let p={name:”jack”,age:21}<br>let {name,age}=p;</p><p>let p={name:”jack”,age:21}<br>let {name:n}=p;&gt;&gt;&gt;n=jack</p><p>let {girl:{name}} =p;<br>{} 解构表达式<br>let {…obj}=p<br>p==obj &gt;&gt;&gt;&gt;false 深层拷贝.</p><p>const add=(a,b)=&gt;a+b   java-&gt;</p><p>定义对象:<br>const p={<br>    key:value,#定义变量<br>    sayHello(){            #定义方式省略函数名<br>        console.log(“hello”);<br>    }<br>}<br>p.sayHello();</p><p>map和reduce</p><p>let arr=[‘1’,’2’,’3’]<br>let arr2=arr.map(s =&gt; parseInt(s)) #<br>arr2.reduce((a,b) =&gt;a+b) 对数组元素做累加<br>arr2.reduce((a,b) =&gt;a*b,0) 指定第一个累乘的元素为0 默认一个个元素</p><p>npm install nrm 镜像切换工具 -g全局</p><p>npm config set registry 私服地址   /nrm add local 私服地址</p><p>nrm ls #查看镜像列表<br>nrm use taobao<br>nrm test npm 测试<br>npm init -y 初始化<br>npm install vue –save 只针对当前项目使用.<br>v-model =”模型属性”  model变属性变属性变双向绑定</p><p>v-text 会转译html成纯文本<br>v-html html渲染<br>事件冒泡:<br>@click.stop=”print(‘button’)”<br>@click.prevent</p><p>v-for:<br>{差值表达式中可以写成js格式 }</p><p>:等同于v-bind &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;:class<br>:class=”{red:isRed,blue:!isRed}”</p><p>data中定义变量isRed=true<br>@click=”isRed=!isRed” 进行属性修改.</p><p>日期格式化:</p><p>#</p><p>data:{<br>birthday:123123213<br>person:{age: 21,<br>name:jack}<br>}<br>computed:{//计算属性<br>    birth(){<br>    const day=new Date(this.birtyday)<br>    day.getFullYear()+”年”+day.getFullMonth+”月”<br>    }<br>},//在方法里面地一个属性进行计算<br>watch:{</p><p>}<br>计算属性只在开始运行一次.</p><p>监控num值的变化:<br>watch:{<br>    num(newValue,oldvalue){  #浅监控<br>        console.log()<br>    }</p><pre><code>person:&#123; #深度监控    deep:true,    handler(val)&#123;        console.log(val.age)    &#125;&#125;</code></pre><p>}</p><div id="app"><counter></counter><counter></counter> 每个组件属性独立<counter></counter></div>Vue组件化开发. vue组件也是一个vue实例<p>Vue.component(“counter”,{  #全局组件定义<br>    template:”&lt;button @click=’count++’&gt;“ #templte中只能有一个根标签<br>    data(){<br>        return count,<br>        return xxx<br>    }<br>})</p><p>const app=new Vue({<br>    el:”#app”,<br>    data{},<br>    componets:{<br>    #局部组件定义 只在#根元素下生效放到vue实例内部<br>        #counter<br>        counter: counter   # es6 key=value 可以简写成 counter<br>    }<br>})</p><p>vuex :组件中通讯和父子间通讯</p><p>父子间通讯:</p><p><code>粘贴html源码不会有拼接</code> 在vue中<br>1,父在子上面绑定事件关联自己的方法<br>2,子:</p><script>const counter ={    template:`    <div>        <button @click="handlAdd">+</button>    </div>    <h1>        Num:    </h1>    # 组件html 不会拼接原样显示`}    props:['num']    methods:{        handleAdd(){            this.$emit('incr'); #实际上促发的式父组件的方法改变num        },    }</script><p>#########################################<br>webpack :<br>1,小文件打包成整体减少请求次数<br>2,将es6语法进行转换编译,兼容老版本浏览器<br>3,代码混淆,提高安全性</p><p>webpack脚手架:vue-cli<br>npm install -g vue-cli<br>ESlint 前端语法校验器.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2020/08/28/jenkins-tips/"/>
      <url>2020/08/28/jenkins-tips/</url>
      
        <content type="html"><![CDATA[<p>设置jenkins开机自启<br>sudo launchctl load -w /Library/LaunchDaemons/org.jenkins-ci.plist<br>sudo launchctl unload -w /Library/LaunchDaemons/org.jenkins-ci.plist</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2020/08/28/password-tips/"/>
      <url>2020/08/28/password-tips/</url>
      
        <content type="html"><![CDATA[<p>1）新津腾华智控科技有限公司，做研发、出口，部分贸易:<a href="http://www.thcon.cn/">www.thcon.cn</a><br>2）四川精控光华科技有限公司，做研发，目前不做实际业务，但是研发部门通常喜欢叫精控公司，<a href="http://www.jkcon.cn/">www.jkcon.cn</a><br>3）四川巴根科技有限公司，做国内贸易，<a href="http://www.bagene.cn/">www.bagene.cn</a><br>4）成都耶拿环保科技有限公司，做环保业务，<a href="http://www.jncon.cn/">www.JNcon.cn</a><br>5）东莞巴根科技有限公司,做国外出口的。<a href="http://www.safetywand.cn/">www.safetywand.cn</a></p><p>unzip:<br>ggKJFKAF112adFAFSAFA<br>========================================<br>wifi:<br>TH<br>82420181<br>========================================<br>shopXo:<br>admin<br>shopxo<br>========================================<br>域名:<a href="http://www.thcon.cn/">www.thcon.cn</a><br>FTP:<br>ID : thzkadmin<br>S  : thzk1817654</p><p>西数官网:<br>ID : thzk0909<br>pwd  : wenchu722127<br>email : <a href="mailto:&#118;&#45;&#115;&#104;&#x69;&#110;&#101;&#x40;&#104;&#x6f;&#116;&#109;&#97;&#105;&#108;&#46;&#99;&#111;&#109;">&#118;&#45;&#115;&#104;&#x69;&#110;&#101;&#x40;&#104;&#x6f;&#116;&#109;&#97;&#105;&#108;&#46;&#99;&#111;&#109;</a></p><p>北京新网:<br>ID : <a href="mailto:&#50;&#50;&#x30;&#55;&#49;&#53;&#x33;&#x39;&#x34;&#x38;&#64;&#x71;&#x71;&#x2e;&#99;&#x6f;&#109;">&#50;&#50;&#x30;&#55;&#49;&#53;&#x33;&#x39;&#x34;&#x38;&#64;&#x71;&#x71;&#x2e;&#99;&#x6f;&#109;</a><br>S  : bg-82448299</p><p>ICP备案系统<br>ID : thzk_1817<br>S  : bg-82448299<br>备案号: 蜀ICP备18015394号<br>密码 : EPF625</p><p>企业邮箱<br><a href="mailto:&#x73;&#x61;&#x6c;&#101;&#x73;&#64;&#116;&#104;&#x63;&#111;&#110;&#46;&#99;&#110;">&#x73;&#x61;&#x6c;&#101;&#x73;&#64;&#116;&#104;&#x63;&#111;&#110;&#46;&#99;&#110;</a>  bg-82448299<br>========================================<br>宝塔账号:<br>15311813923<br>密码:<br>pass1234<br>========================================<br>后台:admin/_pass123<br>前台:<br>========================================<br>ip:108.61.147.149<br>外网面板地址: <a href="http://108.61.147.149:8888/8fafa1a5">http://108.61.147.149:8888/8fafa1a5</a><br>username: ihqlipqm<br>password: 739846ba</p><p>阿里云面板:<br>Bt-Panel:<br>username: AverageJoe<br>password: bg@82448299<br>========================================</p><p>========================================</p><p>========================================<br>恢复秘钥:<br>9C36-6ECB-34A7-51D0 3C5F-B612-454E-634E FD58-C051-B0B9-4AC6 7E99-8407-AE0A-BF35<br>========================================<br>local apollo:<br><a href="http://localhost:8070/signin">http://localhost:8070/signin</a><br>apollo/admin<br>========================================<br>nexus:<br>admin/_pass123<br>average/…<br>========================================<br>网易邮箱:<br><a href="mailto:&#104;&#x71;&#49;&#x35;&#51;&#51;&#51;&#x36;&#x30;&#x30;&#x34;&#52;&#x40;&#x31;&#54;&#x33;&#46;&#x63;&#111;&#x6d;">&#104;&#x71;&#49;&#x35;&#51;&#51;&#51;&#x36;&#x30;&#x30;&#x34;&#52;&#x40;&#x31;&#54;&#x33;&#46;&#x63;&#111;&#x6d;</a><br>_pass12<br>========================================<br>微信小程序:</p><p>登陆邮箱:<a href="mailto:&#49;&#x30;&#55;&#x30;&#51;&#x30;&#57;&#x35;&#57;&#x40;&#x71;&#113;&#46;&#x63;&#x6f;&#x6d;">&#49;&#x30;&#55;&#x30;&#51;&#x30;&#57;&#x35;&#57;&#x40;&#x71;&#113;&#46;&#x63;&#x6f;&#x6d;</a><br>登陆密码:_pass123</p><p>AppID(小程序ID)    wx631112532c759e74<br>secret:284e9434758c67595e2ce8ba71b7c65f<br>========================================<br>支付宝应用id:<br>2021001195645157<br>========================================<br>应用公钥:<br>MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmUwyAtOZe/PaoF7mqwSazsiMXi9yjvQ5GmnVVoBFxshi3UUct297+akDG+Xzre4C94luz+Z54d+eofFIz8mabffHYfO5KdmSbBWzUFRdFiKWmcvucrHWKLbEWKyxGZitYh12A0YN5pM2U6djFedu66IIjk/OSnS7YR5luWKZ86ti66IB5GouDWcvLl7MLTDEMR71pdYwmR+jVcybXcB4RH2fT3Dy2udq9BWAvn9CxhXAt4LncMCbwLQgUVn1MYDF7Te8pHidyQBEcpFb/AemdyqKAKJqoVpSykKS0Wxdl8wEO2THn5WEXj+aYDMQI9EE003ihGW1MH9Nw0P/bxqMJwIDAQAB<br>========================================<br>应用私钥:<br>MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCZTDIC05l789qgXuarBJrOyIxeL3KO9DkaadVWgEXGyGLdRRy3b3v5qQMb5fOt7gL3iW7P5nnh356h8UjPyZpt98dh87kp2ZJsFbNQVF0WIpaZy+5ysdYotsRYrLEZmK1iHXYDRg3mkzZTp2MV527rogiOT85KdLthHmW5Ypnzq2LrogHkai4NZy8uXswtMMQxHvWl1jCZH6NVzJtdwHhEfZ9PcPLa52r0FYC+f0LGFcC3gudwwJvAtCBRWfUxgMXtN7ykeJ3JAERykVv8B6Z3KooAomqhWlLKQpLRbF2XzAQ7ZMeflYReP5pgMxAj0QTTTeKEZbUwf03DQ/9vGownAgMBAAECggEAK3Z782s05/zSboeZlMFAdwJLMeT38OnzSrbY4qaJoftsdFnE84krODSgCgffV9/UfYQ8o7svsUeqfTWgtDDvlOAcanwkcmYaaoSYi1zv63exBTfZijE7i92Nu6pyp9QuzFOYAwOYq1fvnjYmFK7CNxKApICh92AzRCzPIImBJqFtgfMzoVAhsBsJtVGAMzzoiKDo2dlHS1PtMCv7qhcEPgeGXN/nFtGZQukWgGjj58xZFLuatWADhd+mgMjE2/9EN5fd/znO1jKT6AkfzzqPcI45D5IeUJdy5VYbw9V9slNihtKPP0CTDHv6BJSuYOZjR8N3UF5UhFIQ7PuwLgagUQKBgQDwUR+WWws1bEN7EThsm1ksTWXYGkapmlt8TKDYmIA3pV/OQcfzgyXYA7sRXq1hx9xHMVkQ+5/18SURV27calG6NiNIvdilzCVKF3JfLYvYM06IQhiWfmOLQrU5xRMjlYJf/0U5HpHJQ8tQDi9psVk4Q/cjwEvpMkZe26nFGqWbHwKBgQCjTUbWjaGrC4T5sv3Div5FG1nBLxybazvKEFU4OQqnP+c9DL9Gs0xakWvfKH9qhkYjTaN8soKbc55778Y7qnvFEOT0GXBk4pb4gFVss+NOllYUtHp0W/qFKopCog0uYhvxjSlS7r28qM2d5p9n0gElBfP1lsqa8y23Bb07+S71+QKBgBlv7NEEeA5ClG39Z6SPWQQIeURDm8EuFor0rX3fvoqlVZvGeLy84A+abX2sMNwNxLJAdfYHPGpTCSJpx9FK67WzL07u0XTTRAswqimK76eF3sUrgeDEJhNCj147DwiQNcmlgpVGOBY+t9GUfs5IOHJtN0awfxiC+tHlnHXBmU/vAoGAIfZqayjdnLMynrPpLwfzRfAgRJtFudUdhDLNZnoGiy4xK3NBPLUBhjyEUM8dYMw4PhNhkweVPjtXlLMTaUlVoHCZDWNVCsZNW7VlDsyC089Ua831Qcn3Wka0ppMJZsIkyaHwHD1m3JvG17YlJPR6JHcOe982l+9HbK8W4ig66hECgYAFrxh1uhr00Nm7Ci19LmEHk5NlWoYnfqVgv3bjTZuBeE/P/n3nKfeIzOn/DC+O8ZxmHA2xAt3JdIX4VWrZTr7WymixN14UvmnKZRH44Zq2Ex49TuDjrBCHYmzMzAliszf6JIlB2udetYWcZ1lHQl5mF9oDxEmmWl2/yLnXWjOc7g==<br>========================================<br>支付宝公钥:<br>MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAnShCetYw5R932fIGTT9iuvBC9bZ7XEC/UWEvlhrYkCJ4bZ+vfX3su2JPRX0OJX1J79p09KuV/A/vXf3KmxMymWduO/MyNV4pfQ//j4AuPjzLLfABhEsnt7gGmgt0B82n7crIAKXb3kKfh9B4ZWgLEh3722vwnWNR3MTG5Ou+W7KwL2o5j8QOB9VomA1neHT2VfRBx11PUetcnaYz7M+vM+MLb2VtketFAjjIlT2jcLnAioDwF+Dr/Pn4KlhKKafInlQQ2XDRdBbWqlFZQuGNnO0UfBIqW+FuNEaxCpAKV35Nq5gHlU2PfTDFZ/kH2e+V0fWM9tZQGTgLCtNXrW672QIDAQAB<br>========================================<br>巴根阿里云账号:<a href="mailto:&#115;&#97;&#108;&#x65;&#x73;&#x40;&#x62;&#97;&#x67;&#101;&#110;&#101;&#46;&#99;&#111;&#x6d;">&#115;&#97;&#108;&#x65;&#x73;&#x40;&#x62;&#97;&#x67;&#101;&#110;&#101;&#46;&#99;&#111;&#x6d;</a><br>password: bagene-82448299</p><p>阿里云服务器青姐账号购入:<br>ip: 101.200.187.69<br>password: _pass123<br>========================================<br>aaPanel Internet Address: <a href="http://101.200.187.69:8888/bagene/">http://101.200.187.69:8888/bagene/</a><br>aaPanel Internal Address: <a href="http://172.21.194.92:8888/bagene/">http://172.21.194.92:8888/bagene/</a><br>username: AverageJoe<br>password: bg@82448299</p><p>mysql: root/bg@82448299<br>bagene/bg@82448299</p><p>gfy:<br>13808170456<br>ywc:<br>13551129007<br>========================================<br>管理员:<br>admin_hq/admin_hq<br>========================================<br>公司手机号:15828087953<br>========================================<br><a href="https://www.graceindustries.com/safety-products/personal-safety-lights/">https://www.graceindustries.com/safety-products/personal-safety-lights/</a><br><a href="https://safetywandcorp.com/products/h-flare">https://safetywandcorp.com/products/h-flare</a><br>========================================<br>共享: 172.16.20.99<br>YFB:<br>yfb2020101015<br>=================京东=======================</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2020/08/28/shortcut-tips/"/>
      <url>2020/08/28/shortcut-tips/</url>
      
        <content type="html"><![CDATA[<p>1,command + shift +delete  :jump to last edit<br>2,F8 step over Shift+F8      Step Out  相当于eclipse的f8跳到下一个断点，也相当于eclipse的f7跳出函数<br>4,vi:<br>$: move to the end of the line<br>f: letter you want jump to the<br>0: jump to the line starter<br>p: paste<br>dw: delete the whole word<br>whole word<br>“sdfjjkdsfkdswhole word”<br>“sdfjjkdsfkdswhole word”<br>“sdfjjkdsfkdswhole word”<br>whole word<br>whole word<br>w:move forward from word to word<br>b:move backwards from back to back<br>yy:copy this line<br>y:copy current selections<br>v:start the select mode<br>n jkml :perform action with n times<br>50,100s/man/MAN哈哈/g:replace man with MAN哈哈 from line 50 to 100 ,s:for search<br>nyy:copy for n lines from current line<br>np paste for n times<br>ndd:delete n lines from current line(include current line )<br>di”:delete all content in “”(“” exclude)<br>da”:delete all content in “”(“” include)<br>df(x):delete from current cursor to letter “x”(include x)<br>dt(x):delete from current cursor to letter “x”(exclude x)<br>gg:jump to the starter of the doc<br>ng:jump to the line n;<br>a:insert after current cursor<br>$:insert at the end of the line($ not for insert!)<br>I:insert at the beginning of the line<br>shift+* :find next selection<br>command+e: open recent open files<br>command + shift+ enter:auto complete<br>control+command + space:maximize current editor window<br>fn+option+&lt;&lt;&lt;:show navigate bar<br>shift+v :select current line<br>v :start selecting mode<br>v +n+g:select from current to line n<br>option +enter:add or optimize import<br>command +l:format :code<br>command +shift +r : rename method<br>command +option+&lt;&lt;:back<br>command +option+&gt;&gt;:forward<br>Edit json:<br>command +1 injectLanguage or reference&gt;&gt;&gt;&gt; command +1 edit Json fragments<br>command shift (+,-,F)<br>command +shift +T:open terminal window<br>command +n :open class file<br>command +shift +n :open file<br>command +shift +a :enter action or option<br>command + alt+v: auto complete variable declaration<br>command + alt+f: auto complete files decariation</p><p>*****command +option +b:jump to implemented class</p><p>command +k find next selection<br>command +shift+K:find previous selection</p><p>****command +shift+M:toggle between branket start and end</p><p>option+M:add book mark<br>option+shift+M :show book marks<br>shift+ esc:close tools window(exclude main editor)<br>psvm:public static void main<br>psf: public static final<br>command +shift +c :copy file path.<br>*****control +option+n :new file you want<br>option+r:open restful Testing tool<br>command+option sublime纵向选择.<br>command+option+i open debug in chrome<br>control+tab switch tab页编辑文件</p><p>F9            resume programe 恢复程序<br>Alt+F10       show execution point 显示执行断点<br>F8            Step Over 相当于eclipse的f6      跳到下一步<br>F7            Step Into 相当于eclipse的f5就是  进入到代码<br>Alt+shift+F7  Force Step Into 这个是强制进入代码<br>Shift+F8      Step Out  相当于eclipse的f8跳到下一个断点，也相当于eclipse的f7跳出函数<br>Atl+F9        Run To Cursor 运行到光标处<br>**<strong><em>ctrl+shift+F9   debug运行java类<br>**</em></strong>ctrl+shift+F10  正常运行java类<br>alt+F8          debug时选中查看值<br>ps -ef|grep java|grep -v grep|cut -c 9-15|xargs kill -9<br>control+enter 什么未抛异常啊没有try catch啊都能搞得定。神器…..<br>command +b:find declaration of current selected the symbol<br>command+u:find upper class declaration<br>add up:<br>n jkml :perform action with n times<br>50,100s/man/MAN哈哈/g:replace man with MAN哈哈 from line 50 to 100 ,s:for search<br>nyy:copy for n lines from current line<br>ndd:delete n lines from current<br>d0:delete to the line starter<br>ctrl+v :select vertically<br>ctrl+v&gt;&gt;&gt;shift+i=I(insert)&gt;&gt;&gt;esc:multip line comments<br>:w filename :save current file to use filename<br>n+x:delete n characters from current<br>d$:delete from current cursor to line end.<br>new xxx().var tab :auto declare variable</p><p><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>GIT</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong><br>git branch -r  查看远程分支<br>git init folder-初始化一个Git仓库文件夹表示要被Git管理<br>git add filename 把文件加入缓存区<br>git status 查看当前仓库中文件状态是否被Git管理<br>git add . 把当前文件夹所有文件加入缓存区<br>git branch 查看当前所在分支<br>git branch branchName 创建一个branckName分支<br>git checkout joe 切换到分支joe<br>git commit -m 提交加注释<br>git merge joe 把Joe分支所修改的内容合并到主分支<br>HEAD 指的是当前分支的一个游标,与当前分支有关当前是哪个分支就是指哪个分支<br>Git diff head 与当前分支做对比<br>git commit -am ‘’添加到缓存区提交并添加注释<br>git clone 把远端仓库克隆到本地<br>git fetch 连接 把远端仓库的内容拿到本地缓存中&gt;&gt;&gt;&gt;Git merge origin master合并到主分支<br>git config –list:查看git配置信息<br>工作区:每一个项目都有一个.git工作区add&gt;&gt;缓存区:修改后commit&gt;&gt;&gt;版本库<br>git reset HEAD &gt;&gt;&gt; git status &gt;&gt;&gt;git commit  -am ‘2’ 1把1不提交,2提交<br>git tag -a v1.0 打标签表明改版不干什么用的.<br>git log –oneline –decorate v1.0查看当前标签作用<br>git log 查看提交提点<br>git tag -a v1.1 提交点id &gt;&gt;&gt;注释:指定具体提交提点打标签<br>git reset –hard  1640ec6 回退到提交点id<br>ssh加密与远端git仓库连接…<br>ssh-keygen -t rsa -C ‘1533360044@qq.com’ :生成密钥进行服务器认真ssh通信贴入SSH KEY<br>git remote add origin <a href="mailto:&#103;&#x69;&#116;&#64;&#49;&#48;&#46;&#x31;&#x33;&#x2e;&#51;&#48;&#x2e;&#x39;&#x36;">&#103;&#x69;&#116;&#64;&#49;&#48;&#46;&#x31;&#x33;&#x2e;&#51;&#48;&#x2e;&#x39;&#x36;</a>:qiao.hu/gitTest.git 创建连接与远程仓库<br>git remote -v 查看连接<br>git config –global user.name “qiao.hu”<br>git config –global user.email “<a href="mailto:&#49;&#53;&#51;&#x33;&#51;&#54;&#48;&#48;&#x34;&#52;&#64;&#113;&#113;&#x2e;&#99;&#111;&#x6d;">&#49;&#53;&#51;&#x33;&#51;&#54;&#48;&#48;&#x34;&#52;&#64;&#113;&#113;&#x2e;&#99;&#111;&#x6d;</a>“<br>git fork:把远端的更新加载到本地仓库<br>git pull origin 更新本地仓库<br>Command line instructions<br>Git global setup</p><p>git config –global user.name “qia o.hu”<br>git config –global user.email “<a href="mailto:&#x31;&#x35;&#51;&#51;&#x33;&#x36;&#48;&#48;&#x34;&#52;&#x40;&#x71;&#x71;&#46;&#x63;&#111;&#x6d;">&#x31;&#x35;&#51;&#51;&#x33;&#x36;&#48;&#48;&#x34;&#52;&#x40;&#x71;&#x71;&#46;&#x63;&#111;&#x6d;</a>“</p><p>Create a new repository</p><p>git clone <a href="mailto:&#x67;&#x69;&#x74;&#x40;&#49;&#x30;&#46;&#x31;&#x33;&#x2e;&#x33;&#x30;&#x2e;&#x39;&#54;">&#x67;&#x69;&#x74;&#x40;&#49;&#x30;&#46;&#x31;&#x33;&#x2e;&#x33;&#x30;&#x2e;&#x39;&#54;</a>:qiao.hu/gitTest.git<br>cd gitTest<br>touch README.md<br>git add README.md<br>git commit -m “add README”<br>git push -u origin master<br>git branch 查看所有分支<br>git branch -d dev 删除dev分支<br>git push origin :dev删除远端dev分支</p><p>Existing folder or Git repository</p><p>cd existing_folder<br>git init<br>git remote add origin <a href="mailto:&#x67;&#105;&#116;&#x40;&#x31;&#x30;&#x2e;&#x31;&#x33;&#x2e;&#x33;&#48;&#x2e;&#x39;&#x36;">&#x67;&#105;&#116;&#x40;&#x31;&#x30;&#x2e;&#x31;&#x33;&#x2e;&#x33;&#48;&#x2e;&#x39;&#x36;</a>:qiao.hu/gitTest.git<br>git add .<br>git commit<br>git push -u origin master<br>git reset –hard commit_id<br>git log 查看提交日志<br>grep ‘test’ aa bb cc 　　 #显示在aa，bb，cc文件中包含test的行<br>netstat -anp |grep ssh</p><p>chkconfig –list mysqld:查看mysql服务自启状态<br>chkconfig mysqld on/off:开启关闭自启<br>/etc/rc.local:中可以添加自启脚本<br>command +shit +y :use current selection make memo</p><p>netstat -nat |grep 22 :检查防火墙</p><p>ntsysv /tap查看自启运行任务</p><p>命令导出数据库:<br>mysqldump -uroot -p dbname&gt;xxx.sql</p><p>查看当前用户下的定时任务配置:crontab -u root -l<br>在某目录查找文件:find -name “my*.cnf”<br>netstat -anp |grep ssh<br>scp  -P 1922  <a href="mailto:&#114;&#x6f;&#111;&#116;&#x40;&#49;&#x39;&#50;&#46;&#x31;&#54;&#x38;&#x2e;&#x38;&#46;&#49;&#51;&#56;">&#114;&#x6f;&#111;&#116;&#x40;&#49;&#x39;&#50;&#46;&#x31;&#54;&#x38;&#x2e;&#x38;&#46;&#49;&#51;&#56;</a>:/home/ligh/index.php    <a href="mailto:&#x72;&#111;&#111;&#116;&#64;&#49;&#x39;&#x32;&#x2e;&#49;&#54;&#x38;&#46;&#x38;&#46;&#49;&#x33;&#57;">&#x72;&#111;&#111;&#116;&#64;&#49;&#x39;&#x32;&#x2e;&#49;&#54;&#x38;&#46;&#x38;&#46;&#49;&#x33;&#57;</a>:/root<br>unzip “*.zip”<br>替换:<br>sed ‘2s/Version=”[^&quot;]/Version=”2”/‘ test.xml<br><Configuration><br>   &lt;Site Name=”site1” Version=”2”” Root=”/var/root1”/&gt;<br>   <Site name="site2" version="1" root="/var/root2"><br></Site></Configuration></p><p>网卡设备名称定义文件:<br>/etc/udev/rules.d/70-persistent-net.rules<br>查看版本 cat /etc/issue<br>netstat -ano|findstr “2181”</p><p>ps -aef | grep /root/tomcat-omsAdmin | grep -v grep | awk ‘{print $2}’</p><p>ps -aef | grep kibana-4.5.0-linux-x64 | grep -v grep | awk ‘{print $2}’</p><p>port 8098</p><p>netstat -anpt | grep LISTEN | grep :5601 | wc -l</p><p>检查端口自动重启:</p><p>#!/bin/bash<br>c=$(netstat -anpt | grep LISTEN | grep :5601 | wc -l)<br>if [ $c -lt 1 ]<br>then</p><h2 id="重启-kibana"><a href="#重启-kibana" class="headerlink" title="重启 kibana"></a>重启 kibana</h2><p>  sh /root/monitor/kibana-4.5.0-linux-x64/bin/kibana &amp;<br>fi</p><p>crontab 每天早上7点 0 7 * * *</p><p>0 7 * * * sh /usr/local/bin/auto_restart_kibana.sh</p><p>crontab -e */10 * * * * /usr/local/bin/auto_restart_kibana.sh</p><p>列出使用当前端口的进程<br>fuser -n tcp 5601<br>netstat -anpt | grep LISTEN | grep :5601<br>修改root用户密码:<br>passwd root</p><p>tomcat7:redeploy -DskipTests<br>查看所有shell类型:<br>cat /etc/shells</p><p>mac shell 切换:<br>chsh -s /bin/zsh<br>echo $SHELL</p><p>mac查看java_home<br>/usr/libexec/java_home -V</p><pre><code>&lt;build&gt;    &lt;plugins&gt;        &lt;plugin&gt;            &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;            &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;            &lt;configuration&gt;                &lt;!-- 当前tomcat实例运行的端口测试使用 --&gt;                &lt;port&gt;8080&lt;/port&gt;                &lt;!-- 当前工程要部署的路径root目录 --&gt;                &lt;path&gt;/&lt;/path&gt;                &lt;!-- tomcat服务器管理url --&gt;                &lt;url&gt;http://192.168.1.66:8080/manager/text&lt;/url&gt;                &lt;!-- tomcat服务器管理账号 --&gt;                &lt;username&gt;tomcat&lt;/username&gt;                &lt;password&gt;tomcat&lt;/password&gt;            &lt;/configuration&gt;        &lt;/plugin&gt;    &lt;/plugins&gt;&lt;/build&gt;</code></pre><p>alt+shift+U toggle letter case</p><p>find . -type f -size +800M</p><p>control+k：删除光标到命令行行尾<br>control+u：删除光标到命令行开始处</p><p>ctr+h  往后删除一字符    ctr+d 往前删除一字符<br>ctr+b  光标往前           ctr+f 往后<br>ctr+u   删除到最前      ctr+K删除到最后<br>ctr+a  光标到最前      ctr+e 光标到最后<br>ctr+p   往上一条历史命令   ctr+n  往下一条命令</p><p>查询当前目录下含有某字串的所有文件<br>find .|xargs grep -ri “报备”<br>打印出文件名<br>find .|xargs grep -ri “IBM” -l </p><p>/Users/kinderice/Pictures/.m2/settings.xml</p><p>activity 生成:<br>bzx -u e00270 -p _pass123 -d</p><p>mysql -死锁线程kill<br>select * from information_schema.innodb_trx;</p><p>kill 110472;</p><p>自动登录配置:<a href="https://www.tecmint.com/ssh-passwordless-login-using-ssh-keygen-in-5-easy-steps/">https://www.tecmint.com/ssh-passwordless-login-using-ssh-keygen-in-5-easy-steps/</a><br>1, ssh-keygen -t rsa</p><p>查看系统网关配置:<br>netstat -r</p><p><a href="http://13.14.100.14:18181/">http://13.14.100.14:18181</a></p><p>-server -XX:PermSize=128M -XX:MaxPermSize=256m</p><p>open . show current folder in finder</p><p>mycli -h 13.14.100.13 -uroot</p><p>fX<br>在一行中向前搜索字符X并跳转<br>FX<br>在一行中向后搜索字符X并跳转</p><p>ctrl+p show all alternative options</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2020/08/28/sql-tip/"/>
      <url>2020/08/28/sql-tip/</url>
      
        <content type="html"><![CDATA[<p>上面我们提到，使用select…for update会把数据给锁住，不过我们需要注意一些锁的级别，MySQL InnoDB默认行级锁。行级锁都是基于索引的，如果一条SQL语句用不到索引是不会使用行级锁的，会使用表级锁把整张表锁住，这点需要注意。</p><p>select * from information_schema.innodb_trx;<br>kill 1070;</p><p>GRANT ALL PRIVILEGES ON <em>.</em> TO ‘bagene’@’%’ IDENTIFIED BY ‘bg@82448299’</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2020/08/28/sublime-tips/"/>
      <url>2020/08/28/sublime-tips/</url>
      
        <content type="html"><![CDATA[<p>选中 某单词 command +D 选中相同&gt;&gt;同时编辑</p><p>command+shift+d 复制选择内容</p><p>command+l 选中行<br>再使用<br>command+shift+l 进行多行编辑command+l 选中行</p><p>alt+拖动光标选择多行进行编辑</p><p>st: command line redirect to sublime test</p><p>st a.txt sublime open a.txt to edit</p><p>st folder_a open directory with sublime Text</p><p>db.createUser({user: “test”, pwd: “123456”, roles: [{ role: “dbOwner”, db: “dialogflow” }]})</p><p>Ctrl+H:replace</p><p>ctrl+shift+p<br>install package<br>name the plugin you want</p><p>open file with sublime:</p><p>st fileName</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2020/08/28/vbox-tips/"/>
      <url>2020/08/28/vbox-tips/</url>
      
        <content type="html"><![CDATA[<p>chmod +x rc.local<br>/etc/rc.local 中添加开机自启<br>chmod 777 /root/share<br>sudo mount -t vboxsf Share /root/share</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2020/08/28/vi-tips/"/>
      <url>2020/08/28/vi-tips/</url>
      
        <content type="html"><![CDATA[<p>进入vi的命令 ：<br>vi +/pattern filename：打开文件，并将光标置于第一个与pattern匹配的串处<br>vi -r filename ：在上次正用vi编辑时发生系统崩溃，恢复filename<br>vi filename….filename ：打开多个文件，依次进行编辑</p><p>移动光标类命令:<br>k或Ctrl+p：光标上移一行<br>j或Ctrl+n ：光标下移一行<br>Enter ：光标下移一行<br>e或E ：光标右移一个字至字尾<br>) ：光标移至句尾<br>( ：光标移至句首<br>}：光标移至段落开头<br>{：光标移至段落结尾<br>n+：光标下移n行<br>n-：光标上移n行<br>n$：光标移至第n行尾<br>H ：光标移至屏幕顶行<br>M ：光标移至屏幕中间行<br>L ：光标移至屏幕最后行<br>0：（注意是数字零）光标移至当前行首<br>$：光标移至当前行尾</p><p>屏幕翻滚类命令:<br>Ctrl+u：向文件首翻半屏<br>Ctrl+d：向文件尾翻半屏<br>Ctrl+f：向文件尾翻一屏<br>Ctrl＋b；向文件首翻一屏<br>nz：将第n行滚至屏幕顶部，不指定n时将当前行滚至屏幕顶部。</p><p>插入文本类命令 ：<br>i ：在光标前<br>I ：在当前行首<br>R：替换当前字符及其后的字符，直至按ESC键<br>s：从当前光标位置处开始，以输入的文本替代指定数目的字符<br>S：删除指定数目的行，并以所输入文本代替之<br>ncw或nCW：修改指定数目的字<br>nCC：修改指定数目的行</p><p>删除命令：<br>ndw或ndW：删除光标处开始及其后的n-1个字<br>do：删至行首<br>d$：删至行尾<br>ndd：删除当前行及其后n-1行<br>x或X：删除一个字符，x删除光标后的，而X删除光标前的<br>Ctrl+u：删除输入方式下所输入的文本</p><p>搜索及替换命：<br>/pattern：从光标开始处向文件尾搜索pattern<br>?pattern：从光标开始处向文件首搜索pattern<br>n：在同一方向重复上一次搜索命令<br>N：在反方向上重复上一次搜索命令<br>：s/p1/p2/g：将当前行中所有p1均用p2替代<br>：n1,n2s/p1/p2/g：将第n1至n2行中所有p1均用p2替代<br>：g/p1/s//p2/g：将文件中所有p1均用p2替换</p><p>选项设置：<br>all：列出所有选项设置情况<br>term：设置终端类型<br>ignorance：在搜索中忽略大小写<br>list：显示制表位(Ctrl+I)和行尾标志（$)<br>number：显示行号<br>report：显示由面向行的命令修改过的数目<br>terse：显示简短的警告信息<br>warn：在转到别的文件时若没保存当前文件则显示NO write信息<br>nomagic：允许在搜索模式中，使用前面不带“\”的特殊字符<br>nowrapscan：禁止vi在搜索到达文件两端时，又从另一端开始<br>mesg：允许vi显示其他用户用write写到自己终端上的信息</p><p>最后行方式命：<br>：n1,n2 co n3：将n1行到n2行之间的内容拷贝到第n3行下<br>：n1,n2 m n3：将n1行到n2行之间的内容移至到第n3行下<br>：n1,n2 d ：将n1行到n2行之间的内容删除<br>：w ：保存当前文件<br>：e filename：打开文件filename进行编辑<br>：x：保存当前文件并退出<br>：q：退出vi<br>：q!：不保存文件并退出vi<br>：!command：执行shell命令command<br>：n1,n2 w!command：将文件中n1行至n2行的内容作为command的输入并执行之，若不指定n1，n2，则表示将整个文件内容作为command的输入<br>：r!command：将命令command的输出结果放到当前行</p><p>寄存器操作<br>“?nyy：将当前行及其下n行的内容保存到寄存器？中，其中?为一个字母，n为一个数字<br>“?nyw：将当前行及其下n个字保存到寄存器？中，其中?为一个字母，n为一个数字<br>“?nyl：将当前行及其下n个字符保存到寄存器？中，其中?为一个字母，n为一个数字<br>“?p：取出寄存器？中的内容并将其放到光标位置处。这里？可以是一个字母，也可以是一个数字<br>ndd：将当前行及其下共n行文本删除，并将所删内容放到1号删除寄存器中。</p><p>VI常用技巧</p><p>VI命令可以说是Unix/Linux世界里最常用的编辑文件的命令了，但是因为它的命令集众多，很多人都不习惯使用它，其实您只需要掌握基本命令，然后加以灵活运用，就会发现它的优势，并会逐渐喜欢使用这种方法。本文旨在介绍VI的一些最常用命令和高级应用技巧。</p><p>一、基本命令介绍</p><p> 1．光标命令</p><p>k、j、h、l——上、下、左、右光标移动命令。虽然您可以在Linux中使用键盘右边的4个光标键，但是记住这4个命令还是非常有用的。这4个键正是右手在键盘上放置的基本位置。<br>nG——跳转命令。n为行数，该命令立即使光标跳到指定行。<br>Ctrl+G——光标所在位置的行数和列数报告。<br>w、b——使光标向前或向后跳过一个单词。<br> 2．编辑命令<br>i、a、r——在光标的前、后以及所在处插入字符命令(i=insert、a=append、r=replace)。<br>cw、dw——改变(置换)/删除光标所在处的单词的命令 (c=change、d=delete)。<br>x、d$、dd——删除一个字符、删除光标所在处到行尾的所有字符以及删除整行的命令。<br> 3．查找命令<br> /string、?string——从光标所在处向后或向前查找相应的字符串的命令。<br> 4．拷贝复制命令<br> yy、p——拷贝一行到剪贴板或取出剪贴板中内容的命令。</p><p>二、常见问题及应用技巧</p><p> 1．在一个新文件中读/etc/passwd中的内容，取出用户名部分。<br> vi file<br> :r /etc/passwd 在打开的文件file中光标所在处读入/etc/passwd<br> :%s/:.*//g 删除/etc/passwd中用户名后面的从冒号开始直到行尾的所有部分。<br> 您也可以在指定的行号后读入文件内容，例如使用命令“:3r /etc/passwd”从新文件的第3行开始读入 /etc/passwd的所有内容。<br> 我们还可以使用以下方法删掉文件中所有的空行及以#开始的注释行。<br> #cat squid.conf.default | grep -v ^$ | grep -v ^#</p><p> 2．在打开一个文件编辑后才知道登录的用户对该文件没有写的权限，不能存盘，需要将所做修改存入临时文件。<br> vi file<br> :w /tmp/1 保存所做的所有修改，也可以将其中的某一部分修改保存到临时文件，例如仅仅把第20〜59行之间的内容存盘成文件/tmp/1，我们可以键入如下命令。<br> vi file<br> :20,59w /tmp/1</p><p> 3．用VI编辑一个文件，但需要删除大段的内容。<br> 首先利用编辑命令“vi file”打开文件，然后将光标移到需要删除的行处按Ctrl+G显示行号，再到结尾处再按Ctrl+G，显示文件结尾的行号。<br> :23,1045d 假定2次得到的行号为23和1045，则把这期间的内容全删除，也可以在要删除的开始行和结束行中用ma、mb命令标记，然后利用“:a,bd”命令删除。</p><p> 4．在整个文件的各行或某几行的行首或行尾加一些字符串。<br> vi file<br> :3,$s/^/some string / 在文件的第一行至最后一行的行首插入“some string”。<br> :%s/$/some string/g 在整个文件每一行的行尾添加“some string”。<br> :%s/string1/string2/g 在整个文件中替换“string1”成“string2”。<br> :3,7s/string1/string2/ 仅替换文件中的第3行到第7行中的“string1”成“string2”。<br> 注意: 其中s为substitute，%表示所有行，g表示global。</p><p> 5．同时编辑2个文件，拷贝一个文件中的文本并粘贴到另一个文件中。<br> vi file1 file2<br> yy 在文件1的光标处拷贝所在行<br> :n 切换到文件2 (n=next)<br> p 在文件2的光标所在处粘贴所拷贝的行<br> :n 切换回文件1</p><p> 6．替换文件中的路径。<br> 使用命令“:%s#/usr/bin#/bin#g”可以把文件中所有路径/usr/bin换成/bin。也可以使用命令“:%s//usr/bin//bin/g”实现，其中“”是转义字符，表明其后的“/”字符是具有实际意义的字符，不是分隔符。</p><p>ctrl+p :变量提示自动补全</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2020/08/28/docker-tips/"/>
      <url>2020/08/28/docker-tips/</url>
      
        <content type="html"><![CDATA[<p>启动docker服务:<br>service docker start</p><p>命令启动mysql容器 并设置密码:<br>docker run –name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root -d mysql</p><p>docker 中运行的镜像进程:<br>docker ps -l</p><p>宿主机的url/ip<br>docker-machine ls<br>tcp://192.168.99.100:2376<br>docker-machine ip default</p><p>查看容器配置:<br>docker inspect f5d9260ac2a2</p><p>5.进入容器</p><p>docker exec -it 0b7737e0e3c5 /bin/bash</p><p>查看mysql所有配置文件路径:<br>/etc/mysql/mysql.conf.d/mysqld.cnf</p><p>设置server字符编码<br>character-set-server = utf8</p><p>echo  character-set-server = utf8 &gt;&gt; /etc/mysql/mysql.conf.d/mysqld.cnf</p><p>停止并删除容器<br>docker stop f5d9260ac2a2<br>docker rm e1066fe2db35</p><p>mysql -uroot -p -h192.168.99.100 -P3306</p><p>mysql允许任意IP连接 user<br>root host %</p><p>重启服务:<br>service mysql restart</p><p>导出mysql数据<br>mysqldump -uroot -p YourDatabaseName &gt; wantedsqlfile.sql</p><p>编辑容器中文件<br>vim scp://remoteuser@containerip//path/to/document</p><p>vim scp://root@192.168.99.100//usr/local/tomcat/webapps/manager/META-INF/context.xml</p><p>把文件cp到宿主机修改:<br>docker cp tomcat-manager:/usr/local/tomcat/webapps/manager/META-INF/context.xml  /Users/kinderice/Pictures/docker/path_to_edit/tomcat-users.xml<br>修改后传到容器:<br>docker cp /Users/kinderice/Pictures/docker/path_to_edit/tomcat-users.xml  tomcat-manager:/usr/local/tomcat/webapps</p><p>查看docker容器信息:<br>docker info</p><p>docker账号和密码:<br>user: docker<br>pass: tcuser</p><p>停用网卡:<br>ifconfig tun0 down</p><p>阿里云镜像加速:<br><a href="https://1yguejoq.mirror.aliyuncs.com/">https://1yguejoq.mirror.aliyuncs.com</a></p><p>docker ps :查看容器名字<br>tomcat-manager</p><p>docker日志:<br>./var/log/messages</p><p>动态查看docker容器日志:<br>docker logs –tail 50 –follow –timestamps 72b752d208db</p><p>storage<br>rm /var/fdfs/storage/data/fdfs_storaged.pid</p><p>/Users/AverageJoe/nexus-data</p><p>docker run -d -p 10010:10010 –name nexus -v /Users/AverageJoe/nexus-data:/var/nexus-data –restart=always sonatype/nexus3</p><p>docker logs gitlab</p><p>docker run <br>    –detach <br>    –publish 8443:443 <br>    –publish 10086:80 <br>    –name gitlab <br>    –restart unless-stopped <br>    -v /Users/AverageJoe/gitlab/etc:/etc/gitlab <br>    -v /Users/AverageJoe/gitlab/log:/var/log/gitlab  \<br>    -v /Users/AverageJoe/gitlab/data:/var/opt/gitlab  <br>    –privileged=true <br>    beginor/gitlab-ce:11.0.1-ce.0 </p><p>docker commit</p><p>#推送镜像前登陆远程仓库<br>docker login<br>tag加上用户名:<br>docker tag  ubuntu  shen6409175/ubuntu<br>docker push shen6409175/ubuntu</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2020/08/28/git-shortcuts-tips/"/>
      <url>2020/08/28/git-shortcuts-tips/</url>
      
        <content type="html"><![CDATA[<p>gd - git diff<br>gdc - git diff –cached<br>gdv - git diff -w “$@” | view<br>gc - git commit -v<br>gc! - git commit -v –amend<br>gca - git commit -v -a<br>gca! - git commit -v -a –amend<br>gcmsg - git commit -m<br>gco - git checkout<br>gcm - git checkout master<br>gr - git remote<br>grv - git remote -v<br>grmv - git remote rename<br>grrm - git remote remove<br>gsetr - git remote set-url<br>grup - git remote update<br>grbi - git rebase -i<br>grbc - git rebase –continue<br>grba - git rebase –abort<br>gb - git branch<br>gba - git branch -a<br>gcount - git shortlog -sn<br>gcl - git config –list<br>gcp - git cherry-pick<br>glg - git log –stat –max-count=10<br>glgg - git log –graph –max-count=10<br>glgga - git log –graph –decorate –all<br>glo - git log –oneline –decorate –color<br>glog - git log –oneline –decorate –color –graph<br>gss - git status -s<br>ga - git add<br>gm - git merge<br>grh - git reset HEAD<br>grhh - git reset HEAD –hard<br>gclean - git reset –hard &amp;&amp; git clean -dfx<br>gwc - git whatchanged -p –abbrev-commit –pretty=medium<br>gsts - git stash show –text<br>gsta - git stash<br>gstp - git stash pop<br>gstd - git stash drop<br>ggpull - git pull origin $(current_branch)<br>ggpur - git pull –rebase origin $(current_branch)<br>ggpush - git push origin $(current_branch)<br>ggpnp - git pull origin $(current_branch) &amp;&amp; git push origin $(current_branch)<br>glp - _git_log_prettily</p><p>设置远端分支的与本地分支的关联:<br>git branch –set-upstream-to=origin/dev_joe </p><p>将游离状态指向新分支:<br>git checkout -b joe-omsAdmin-1020</p><p>git rm –cached readme1.txt    删除readme1.txt的跟踪，并保留在本地。</p><p>git rm –f readme1.txt    删除readme1.txt的跟踪，并且删除本地文件。</p><p>Question:</p><h1 id="Your-branch-and-‘origin-master’-have-diverged"><a href="#Your-branch-and-‘origin-master’-have-diverged" class="headerlink" title="Your branch and ‘origin/master’ have diverged,"></a>Your branch and ‘origin/master’ have diverged,</h1><h1 id="and-have-3-and-8-different-commits-each-respectively"><a href="#and-have-3-and-8-different-commits-each-respectively" class="headerlink" title="and have 3 and 8 different commits each, respectively."></a>and have 3 and 8 different commits each, respectively.</h1><h1 id="use-“git-pull”-to-merge-the-remote-branch-into-yours"><a href="#use-“git-pull”-to-merge-the-remote-branch-into-yours" class="headerlink" title="(use “git pull” to merge the remote branch into yours)"></a>(use “git pull” to merge the remote branch into yours)</h1><p>Resolve:</p><p>git fetch origin<br>git reset –hard origin/master</p><p>2.先删后加<br>git remote rm origin<br>git remote add origin [url]</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2020/08/28/storm-tips/"/>
      <url>2020/08/28/storm-tips/</url>
      
        <content type="html"><![CDATA[<p>hadoop非实时计算体验不好.mapper/reduce /批处理而生<br>storm:实时计算 监控预警/婚恋网/推荐<br>hive : sql语句<br>====================================<br>优点:<br>低延迟//高性能//消息不丢失//消息有序//高容错</p><p>缺点:<br>单点  nimbus,编译语言维护成本高clojure</p><p>工作节点都运行了一个supervisor守护进程</p><p>快速失败:自动重启</p><h1 id="nimbus-单点-主节点-分配代码-布置任务-故障检查"><a href="#nimbus-单点-主节点-分配代码-布置任务-故障检查" class="headerlink" title="nimbus 单点:主节点 分配代码,布置任务,故障检查"></a>nimbus 单点:主节点 分配代码,布置任务,故障检查</h1><p>nimbus和工作进程之间由zk协调</p><p>应用组件名字:topology 部署应用拓扑消息流动<br>nimbus<br>Spout 外部数据读取主动角色 nextTuple()死循环<br>bolt 执行一个处理的组件所有操作被动角色executeTuple()<br>Tuple 相当于Valuelist<br>Stream: 源源不断的tuple<br>worker 进程 每一个进程有一个端口对应<br>supervisor<br>task:worker 中每一个spout/bolt 的线程</p><p>storm使用场景:<br>1,流聚合<br>2,批处理<br>3,读tuple 发多个或一个tuple<br>4,IbasicBolt execute(),ack()<br>5,Fields grouping组合<br>6,连接缓存短连接转换长连接</p><p>分组机制:<br> 1, Strem Grouping 一个流在bolt任务之间的切分规则.<br> 随机分组<br> 字段分组 指定字段分发bolt 哈希区域<br> allgroup :tuple 复制分组到所有bolt<br> 无分组 等同于随机分组 最终storm会把所有的无分组放到订阅的同一线程中运行<br> 直接分组:生产者决定tuple由那个bolt接收<br> 还可以实现customeStreamGrouping自己定义分组</p><p>storm ui :集群拓扑部署查看</p><p>停止:<br>nimbus 上运行<br>./storm kill  topology-name</p><p>BasicBolt 不用关心ack/fail</p><p>emit:发送到下一个节点</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2020/08/28/teamviewer-crack/"/>
      <url>2020/08/28/teamviewer-crack/</url>
      
        <content type="html"><![CDATA[<p>teamviewer 刷新mac地址:<br>/Users/AverageJoe/Devs/idea/gitSource/mac-teamviewer-crack<br>sudo python TeamViewer-id-changer.py\</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2020/08/28/python-tips/"/>
      <url>2020/08/28/python-tips/</url>
      
        <content type="html"><![CDATA[<p>opt目录任何用户都有权限</p><h1 id="注释需要空格单行注释一个空格"><a href="#注释需要空格单行注释一个空格" class="headerlink" title="注释需要空格单行注释一个空格"></a>注释需要空格单行注释一个空格</h1><p>code  #单行注释可以放在当前行后面如果注释很短两个空格<br>运算符：<br>//取整<br><strong>次幂计算2</strong>3=8</p><p>变量：<br>变量第一次出现定义变量第二次修改变量</p><p>定义变量时python变量的类型是由等号右边的类型自动确定</p><p>数据类型：</p><p>0=False  非零=True   非零既真</p><p>复数型 ：科学计算</p><p>python2 中有int 和long 区分</p><p>python3 只有int类型</p><p> bool类型：<br> True&gt;&gt;&gt;1<br> False&gt;&gt;&gt;0</p><p> str1+str2 字符串相加等于拼接字符串</p><p>字符串变量可以用 * +  不能与数字运算</p><p>变量的输入：</p><p>input()的输入类型都是字符串类型的</p><p>类型转换函数：</p><p>int(“22”)<br>float（”2.3”） </p><p>格式化字符%：<br>s &gt;字符串<br>d &gt;num<br>f &gt;float<br>%% &gt;%</p><p>多值格式化 %（变量1，变量2….）</p><p>%.2f 表示小数点后面显示2位</p><p>%06d :表示输出展示整数的位数6位不足补0</p><p>scale=0.25<br>print(“数据比利是：%.2f%%”%(scale*100))</p><blockquote><blockquote><blockquote><blockquote><p>25%</p></blockquote></blockquote></blockquote></blockquote><p>变量命名：<br>关键字：<br>import keyword<br>print(keyword.kwlist)<br>推荐：下划线分割多个单词<br>可以驼峰命名</p><p>python2不等于可以有&lt;&gt; !=</p><p>相同缩进代表同一个代码块</p><p>相同数据类型才能进行大小比较</p><p>逻辑运算符：</p><p>and or 与或<br>非not 条件 :对条件取反</p><p>if critera1:<br>    do sth<br>elif critera2:<br>    do another..<br>elif critera3:<br>    do another…<br>else:<br>    none of above doing</p><p>if() or () or ():&gt;&gt;&gt;&gt;or条件换行</p><p>if(()<br>    or()<br>    or()):<br>编辑器自动换行: \ 不用添加括号</p><p>import 工具包在文件开头方便下面的代码调用</p><p>\转译字符<br>&quot; &gt;&gt;”<br>&#39;&gt;&gt;’<br>\&gt;&gt; <br>\r &gt;&gt; 回车</p><p>import while_test 导入自己写的工具包</p><p>def:定义函数<br>def functionName():<br>        “””函数文档注释 “””<br>函数是先定义再调用 python是从上到下执行</p><p>函数定义上方空两行</p><p>按住ctrl可以查看函数注释</p><p>###################################################################</p><p>python setup.py build 打包 exe </p><p>pip install -r C:\projects\flaskmongouserlogintemplate\requirements.txt</p><p>list(map(lambda x:str(x),auths))</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2020/08/28/windows-tips/"/>
      <url>2020/08/28/windows-tips/</url>
      
        <content type="html"><![CDATA[<p>最小化当前窗口：<br>alt+esc<br>ctrl+d ===ctrl+c 退出<br>alt+f4 close current window<br>ctrl+W close tab<br>win+m minimum window<br>win+D show desktop</p><p>chrome F12 developer mode</p><p>netstat -aon|findstr “49157”</p><p>netstat -ano | findstr “:80 “</p><p>delete service after program remvoed<br>sc delete MySQL </p><p>set JAVA_HOME=C:\Program Fiels (x86)\Java\jre1.8.0_171</p><p>netstat -anb 查看端口占用</p><p>taskkill /IM iexplore.exe /F</p><p>systeminfo</p><p>find . -name “*.css”|xargs grep -n “yun.ae8e0024.png”</p><p>netstat -aon|findstr “8070”<br>taskkill /pid 6128 /t /f</p><p>run on start folder:<br>C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp<br>alt + esc minimize window</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2020/08/28/vpn/"/>
      <url>2020/08/28/vpn/</url>
      
        <content type="html"><![CDATA[<p>#!/bin/sh</p><p>yum install docker -y&amp;&amp;service docker start&amp;&amp;chkconfig docker on&amp;&amp;docker pull oddrationale/docker-shadowsocks&amp;&amp;docker run -d -p 17330:17330  –restart=always oddrationale/docker-shadowsocks -s 0.0.0.0 -p 17330 -k _pass123 -m aes-256-cfb&amp;&amp;yum update -y&amp;&amp;rpm –import <a href="https://www.elrepo.org/RPM-GPG-KEY-elrepo.org&amp;&amp;rpm">https://www.elrepo.org/RPM-GPG-KEY-elrepo.org&amp;&amp;rpm</a> -Uvh <a href="http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm&amp;&amp;echo">http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm&amp;&amp;echo</a> y | yum –enablerepo=elrepo-kernel install kernel-ml&amp;&amp;grub2-set-default 1&amp;&amp;echo y |yum install expect&amp;&amp;expect &lt;&lt;EOF<br>set timeout -1<br>spawn ssh-keygen -t rsa<br>expect “(/root/.ssh/id_rsa):”<br>send “\r”<br>expect “(empty for no passphrase):”<br>send “\r”<br>expect “again:”<br>send “\r”<br>expect eof<br>EOF<br>echo “ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDMfSgrbnmp10p2F2YenvFLfPQPwyJ1DrSWBh9G4u0iE1PolSxESFFHv0UWpoCfdCs9Rwg385zpq4gRDZIkFbZJ583KPB7EKD4PfzJ1Lzgs5hRXQxIFxYvmvEGvXwoBVJ9WAnl21FVO6bAuBhYbLx+hTBac3MZc9dfFcycBFyjVWKMAM7HuecR6nn9JM8jMWZokqg33uOhMWVaIF7vpq1S302B9BLx737Fn+fnASCjjLl8ZUxizBJI7b4lELNbM30DWtA9yDz8Ds+FPE1LtSKdA2Hi0r8QJ+3xC6f/QJ3c/Fe55tlvAr1UDoxUqVpSavJwHWOx9o61XvOIAaau/7HEj <a href="mailto:&#x31;&#53;&#51;&#x33;&#51;&#54;&#x30;&#48;&#52;&#x34;&#x40;&#113;&#113;&#x2e;&#x63;&#x6f;&#x6d;">&#x31;&#53;&#51;&#x33;&#51;&#54;&#x30;&#48;&#52;&#x34;&#x40;&#113;&#113;&#x2e;&#x63;&#x6f;&#x6d;</a>“ &gt; /root/.ssh/authorized_keys&amp;&amp;chmod 700 .ssh&amp;&amp;chmod 600 .ssh/authorized_keys&amp;&amp;reboot</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2020/08/28/node-js-tips/"/>
      <url>2020/08/28/node-js-tips/</url>
      
        <content type="html"><![CDATA[<p>angular:<br>grunt serve 启动前端web界面 </p><p>bower install angular#1.6.9 –save</p><p>node:<br>npm start </p><p>bower install <a href="mailto:&#x61;&#110;&#x67;&#x75;&#x6c;&#x61;&#x72;&#64;&#x31;&#46;&#x36;&#46;&#57;">&#x61;&#110;&#x67;&#x75;&#x6c;&#x61;&#x72;&#64;&#x31;&#46;&#x36;&#46;&#57;</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2020/08/28/linux-command-tips/"/>
      <url>2020/08/28/linux-command-tips/</url>
      
        <content type="html"><![CDATA[<p>echo $SHELL</p><p>chsh -s /bin/zsh</p><p>cmd&gt;&gt;bash切换至：<br>bash on Ubuntu on Windows</p><p>gi first search box focus</p><p>which 查看命令位置</p><p>ls -lh 可查看文件大小</p><p>环境变量系统路径<br>echo $PATH<br>递归删除某后缀文件<br>find . -name “*.pyc”  | xargs rm -f</p><p>curl -O #download </p><p>getconf LONG_BIT</p><p>cat /etc/redhat-release</p><p>#查看哪个应用占用某端口:<br> ss -lpn src :22122</p><p> sudo chown -R www /home</p><p> sudo chgrp -R www /home</p><p> 防火墙状态:<br> firewall-cmd –state<br> 开放端口:<br> firewall-cmd –zone=public –add-port=3306/tcp –permanent</p><p>宝塔面板秘钥重置:<br> cd /www/server/panel &amp;&amp; python tools.py panel testpasswd</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2020/08/28/vpm-tips/"/>
      <url>2020/08/28/vpm-tips/</url>
      
        <content type="html"><![CDATA[<p>#!/bin/sh</p><p>yum install docker -y&amp;&amp;service docker start&amp;&amp;chkconfig docker on&amp;&amp;docker pull oddrationale/docker-shadowsocks&amp;&amp;docker run -d -p 17330:17330  –restart=always oddrationale/docker-shadowsocks -s 0.0.0.0 -p 17330 -k _pass123 -m aes-256-cfb&amp;&amp;yum update -y&amp;&amp;rpm –import <a href="https://www.elrepo.org/RPM-GPG-KEY-elrepo.org&amp;&amp;rpm">https://www.elrepo.org/RPM-GPG-KEY-elrepo.org&amp;&amp;rpm</a> -Uvh <a href="http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm&amp;&amp;echo">http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm&amp;&amp;echo</a> y | yum –enablerepo=elrepo-kernel install kernel-ml&amp;&amp;grub2-set-default 1&amp;&amp;echo y |yum install expect&amp;&amp;expect &lt;&lt;EOF<br>set timeout -1<br>spawn ssh-keygen -t rsa<br>expect “(/root/.ssh/id_rsa):”<br>send “\r”<br>expect “(empty for no passphrase):”<br>send “\r”<br>expect “again:”<br>send “\r”<br>expect eof<br>EOF<br>echo “ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDMfSgrbnmp10p2F2YenvFLfPQPwyJ1DrSWBh9G4u0iE1PolSxESFFHv0UWpoCfdCs9Rwg385zpq4gRDZIkFbZJ583KPB7EKD4PfzJ1Lzgs5hRXQxIFxYvmvEGvXwoBVJ9WAnl21FVO6bAuBhYbLx+hTBac3MZc9dfFcycBFyjVWKMAM7HuecR6nn9JM8jMWZokqg33uOhMWVaIF7vpq1S302B9BLx737Fn+fnASCjjLl8ZUxizBJI7b4lELNbM30DWtA9yDz8Ds+FPE1LtSKdA2Hi0r8QJ+3xC6f/QJ3c/Fe55tlvAr1UDoxUqVpSavJwHWOx9o61XvOIAaau/7HEj <a href="mailto:&#x31;&#53;&#51;&#x33;&#51;&#54;&#48;&#x30;&#x34;&#x34;&#x40;&#x71;&#113;&#46;&#x63;&#111;&#x6d;">&#x31;&#53;&#51;&#x33;&#51;&#54;&#48;&#x30;&#x34;&#x34;&#x40;&#x71;&#113;&#46;&#x63;&#111;&#x6d;</a>“ &gt; /root/.ssh/authorized_keys&amp;&amp;chmod 700 .ssh&amp;&amp;chmod 600 .ssh/authorized_keys&amp;&amp;reboot</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2020/08/18/mac-tips/"/>
      <url>2020/08/18/mac-tips/</url>
      
        <content type="html"><![CDATA[<p>nginx -h<br>nginx -s  stop<br>开启读写权限:<br>sudo mount -uw /</p><p>ln -s source destination</p><p>ln -s /Users/AverageJoe/Pictures/pap.er/* /Users/AverageJoe/blogs/source/_posts/diary/imgs</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2020/08/14/php/"/>
      <url>2020/08/14/php/</url>
      
        <content type="html"><![CDATA[<p>apache默认服务器安装目录:<br>/etc/apache2<br>命令<br>sudo apachectl start     //开始<br>sudo apachectl restart   //重启<br>sudo apachectl stop      //停止</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/"/>
      <url>2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/</url>
      
        <content type="html"><![CDATA[<h1 id="0-学习目标"><a href="#0-学习目标" class="headerlink" title="0.学习目标"></a>0.学习目标</h1><h1 id="1-无状态登录原理"><a href="#1-无状态登录原理" class="headerlink" title="1.无状态登录原理"></a>1.无状态登录原理</h1><h2 id="1-1-什么是有状态？"><a href="#1-1-什么是有状态？" class="headerlink" title="1.1.什么是有状态？"></a>1.1.什么是有状态？</h2><p>有状态服务，即服务端需要记录每次会话的客户端信息，从而识别客户端身份，根据用户身份进行请求的处理，典型的设计如tomcat中的session。</p><p>例如登录：用户登录后，我们把登录者的信息保存在服务端session中，并且给用户一个cookie值，记录对应的session。然后下次请求，用户携带cookie值来，我们就能识别到对应session，从而找到用户的信息。</p><p>缺点是什么？</p><ul><li>服务端保存大量数据，增加服务端压力</li><li>服务端保存用户状态，无法进行水平扩展</li><li>客户端请求依赖服务端，多次请求必须访问同一台服务器</li></ul><h2 id="1-2-什么是无状态"><a href="#1-2-什么是无状态" class="headerlink" title="1.2.什么是无状态"></a>1.2.什么是无状态</h2><p>微服务集群中的每个服务，对外提供的都是Rest风格的接口。而Rest风格的一个最重要的规范就是：服务的无状态性，即：</p><ul><li>服务端不保存任何客户端请求者信息</li><li>客户端的每次请求必须具备自描述信息，通过这些信息识别客户端身份</li></ul><p>带来的好处是什么呢？</p><ul><li>客户端请求不依赖服务端的信息，任何多次请求不需要必须访问到同一台服务</li><li>服务端的集群和状态对客户端透明</li><li>服务端可以任意的迁移和伸缩</li><li>减小服务端存储压力</li></ul><h2 id="1-3-如何实现无状态"><a href="#1-3-如何实现无状态" class="headerlink" title="1.3.如何实现无状态"></a>1.3.如何实现无状态</h2><p>无状态登录的流程：</p><ul><li>当客户端第一次请求服务时，服务端对用户进行信息认证（登录）</li><li>认证通过，将用户信息进行加密形成token，返回给客户端，作为登录凭证</li><li>以后每次请求，客户端都携带认证的token</li><li>服务端对token进行解密，判断是否有效。</li></ul><p>流程图：</p><p> <img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1527300483893.png"></p><p>整个登录过程中，最关键的点是什么？</p><p><strong>token的安全性</strong></p><p>token是识别客户端身份的唯一标示，如果加密不够严密，被人伪造那就完蛋了。</p><p>采用何种方式加密才是安全可靠的呢？</p><p>我们将采用<code>JWT + RSA非对称加密</code></p><h2 id="1-4-JWT"><a href="#1-4-JWT" class="headerlink" title="1.4.JWT"></a>1.4.JWT</h2><h3 id="1-4-1-简介"><a href="#1-4-1-简介" class="headerlink" title="1.4.1.简介"></a>1.4.1.简介</h3><p>JWT，全称是Json Web Token， 是JSON风格轻量级的授权和身份认证规范，可实现无状态、分布式的Web应用授权；官网：<a href="https://jwt.io/">https://jwt.io</a></p><p><img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1533033734163.png" alt="1533033734163"></p><p>GitHub上jwt的java客户端：<a href="https://github.com/jwtk/jjwt">https://github.com/jwtk/jjwt</a></p><h3 id="1-4-2-数据格式"><a href="#1-4-2-数据格式" class="headerlink" title="1.4.2.数据格式"></a>1.4.2.数据格式</h3><p>JWT包含三部分数据：</p><ul><li><p>Header：头部，通常头部有两部分信息：</p><ul><li>声明类型，这里是JWT</li><li>加密算法，自定义</li></ul><p>我们会对头部进行base64加密（可解密），得到第一部分数据</p></li><li><p>Payload：载荷，就是有效数据，一般包含下面信息：</p><ul><li>用户身份信息（注意，这里因为采用base64加密，可解密，因此不要存放敏感信息）</li><li>注册声明：如token的签发时间，过期时间，签发人等</li></ul><p>这部分也会采用base64加密，得到第二部分数据</p></li><li><p>Signature：签名，是整个数据的认证信息。一般根据前两步的数据，再加上服务的的密钥（secret）（不要泄漏，最好周期性更换），通过加密算法生成。用于验证整个数据完整和可靠性</p></li></ul><p>生成的数据格式：</p><p><img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1527322512370.png" alt="1527322512370"></p><p>可以看到分为3段，每段就是上面的一部分数据</p><h3 id="1-4-3-JWT交互流程"><a href="#1-4-3-JWT交互流程" class="headerlink" title="1.4.3.JWT交互流程"></a>1.4.3.JWT交互流程</h3><p>流程图：</p><p> <img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1527305891424.png" alt="1527305891424"></p><p>步骤翻译：</p><ul><li>1、用户登录</li><li>2、服务的认证，通过后根据secret生成token</li><li>3、将生成的token返回给浏览器</li><li>4、用户每次请求携带token</li><li>5、服务端利用公钥解读jwt签名，判断签名有效后，从Payload中获取用户信息</li><li>6、处理请求，返回响应结果</li></ul><p>因为JWT签发的token中已经包含了用户的身份信息，并且每次请求都会携带，这样服务的就无需保存用户信息，甚至无需去数据库查询，完全符合了Rest的无状态规范。</p><h3 id="1-4-4-非对称加密"><a href="#1-4-4-非对称加密" class="headerlink" title="1.4.4.非对称加密"></a>1.4.4.非对称加密</h3><p>加密技术是对信息进行编码和解码的技术，编码是把原来可读信息（又称明文）译成代码形式（又称密文），其逆过程就是解码（解密），加密技术的要点是加密算法，加密算法可以分为三类：  </p><ul><li>对称加密，如AES<ul><li>基本原理：将明文分成N个组，然后使用密钥对各个组进行加密，形成各自的密文，最后把所有的分组密文进行合并，形成最终的密文。</li><li>优势：算法公开、计算量小、加密速度快、加密效率高</li><li>缺陷：双方都使用同样密钥，安全性得不到保证 </li></ul></li><li>非对称加密，如RSA<ul><li>基本原理：同时生成两把密钥：私钥和公钥，私钥隐秘保存，公钥可以下发给信任客户端<ul><li>私钥加密，持有私钥或公钥才可以解密</li><li>公钥加密，持有私钥才可解密</li></ul></li><li>优点：安全，难以破解</li><li>缺点：算法比较耗时</li></ul></li><li>不可逆加密，如MD5，SHA<ul><li>基本原理：加密过程中不需要使用<a href="https://baike.baidu.com/item/%E5%AF%86%E9%92%A5">密钥</a>，输入明文后由系统直接经过加密算法处理成密文，这种加密后的数据是无法被解密的，无法根据密文推算出明文。</li></ul></li></ul><p>RSA算法历史：</p><p>1977年，三位数学家Rivest、Shamir 和 Adleman 设计了一种算法，可以实现非对称加密。这种算法用他们三个人的名字缩写：RSA</p><h2 id="1-5-结合Zuul的鉴权流程"><a href="#1-5-结合Zuul的鉴权流程" class="headerlink" title="1.5.结合Zuul的鉴权流程"></a>1.5.结合Zuul的鉴权流程</h2><p>我们逐步演进系统架构设计。需要注意的是：secret是签名的关键，因此一定要保密，我们放到鉴权中心保存，其它任何服务中都不能获取secret。</p><h3 id="1-5-1-没有RSA加密时"><a href="#1-5-1-没有RSA加密时" class="headerlink" title="1.5.1.没有RSA加密时"></a>1.5.1.没有RSA加密时</h3><p>在微服务架构中，我们可以把服务的鉴权操作放到网关中，将未通过鉴权的请求直接拦截，如图：</p><p><img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1527312464328.png" alt="1527312464328"></p><ul><li>1、用户请求登录</li><li>2、Zuul将请求转发到授权中心，请求授权</li><li>3、授权中心校验完成，颁发JWT凭证</li><li>4、客户端请求其它功能，携带JWT</li><li>5、Zuul将jwt交给授权中心校验，通过后放行</li><li>6、用户请求到达微服务</li><li>7、微服务将jwt交给鉴权中心，鉴权同时解析用户信息</li><li>8、鉴权中心返回用户数据给微服务</li><li>9、微服务处理请求，返回响应</li></ul><p>发现什么问题了？</p><p>每次鉴权都需要访问鉴权中心，系统间的网络请求频率过高，效率略差，鉴权中心的压力较大。</p><h3 id="1-5-2-结合RSA的鉴权"><a href="#1-5-2-结合RSA的鉴权" class="headerlink" title="1.5.2.结合RSA的鉴权"></a>1.5.2.结合RSA的鉴权</h3><p>直接看图：</p><p><img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1527313765010.png" alt="1527313765010"></p><ul><li>我们首先利用RSA生成公钥和私钥。私钥保存在授权中心，公钥保存在Zuul和各个微服务</li><li>用户请求登录</li><li>授权中心校验，通过后用私钥对JWT进行签名加密</li><li>返回jwt给用户</li><li>用户携带JWT访问</li><li>Zuul直接通过公钥解密JWT，进行验证，验证通过则放行</li><li>请求到达微服务，微服务直接用公钥解析JWT，获取用户信息，无需访问授权中心</li></ul><h1 id="2-授权中心"><a href="#2-授权中心" class="headerlink" title="2.授权中心"></a>2.授权中心</h1><h2 id="2-1-创建授权中心"><a href="#2-1-创建授权中心" class="headerlink" title="2.1.创建授权中心"></a>2.1.创建授权中心</h2><p>授权中心的主要职责：</p><ul><li>用户鉴权：<ul><li>接收用户的登录请求，通过用户中心的接口进行校验，通过后生成JWT</li><li>使用私钥生成JWT并返回</li></ul></li><li>服务鉴权：微服务间的调用不经过Zuul，会有风险，需要鉴权中心进行认证<ul><li>原理与用户鉴权类似，但逻辑稍微复杂一些（此处我们不做实现）</li></ul></li></ul><p>因为生成jwt，解析jwt这样的行为以后在其它微服务中也会用到，因此我们会抽取成工具。我们把鉴权中心进行聚合，一个工具module，一个提供服务的module</p><h3 id="2-1-1-创建父module"><a href="#2-1-1-创建父module" class="headerlink" title="2.1.1.创建父module"></a>2.1.1.创建父module</h3><p>我们先创建父module，名称为：leyou-auth</p><p><img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1533263572529.png" alt="1533263572529"></p><p><img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1533263656410.png" alt="1533263656410"></p><p>将pom打包方式改为pom：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.parent<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.auth<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou-auth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-1-2-通用module"><a href="#2-1-2-通用module" class="headerlink" title="2.1.2.通用module"></a>2.1.2.通用module</h3><p>然后是授权服务的通用模块：leyou-auth-common：</p><p><img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1533264701684.png" alt="1533264701684"></p><p><img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1533264779361.png" alt="1533264779361"></p><p>pom.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou-auth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.auth<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.auth<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou-auth-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结构：</p><p> <img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1533264903853.png" alt="1533264903853"></p><h3 id="2-1-3-授权服务"><a href="#2-1-3-授权服务" class="headerlink" title="2.1.3.授权服务"></a>2.1.3.授权服务</h3><p><img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1533265001140.png" alt="1533265001140"></p><p><img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1533265056671.png" alt="1533265056671"></p><p>pom.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou-auth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.auth<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.auth<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou-auth-service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.auth<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou-auth-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.common<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引导类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeyouAuthApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LeyouAuthApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8087</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">auth-service</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br><span class="line">    <span class="attr">registry-fetch-interval-seconds:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">5</span> <span class="comment"># 每隔5秒发送一次心跳</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">10</span> <span class="comment"># 10秒不发送就过期</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">ip-address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span></span><br></pre></td></tr></table></figure><p> 结构：</p><p> <img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1533266035185.png" alt="1533266035185"></p><p>在leyou-gateway工程的application.yml中，修改路由：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">prefix:</span> <span class="string">/api</span> <span class="comment"># 路由路径前缀</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">item-service:</span> <span class="string">/item/**</span> <span class="comment"># 商品微服务的映射路径</span></span><br><span class="line">    <span class="attr">search-service:</span> <span class="string">/search/**</span> <span class="comment"># 搜索微服务</span></span><br><span class="line">    <span class="attr">user-service:</span> <span class="string">/user/**</span> <span class="comment"># 用户微服务</span></span><br><span class="line">    <span class="attr">auth-service:</span> <span class="string">/auth/**</span> <span class="comment"># 授权中心微服务</span></span><br></pre></td></tr></table></figure><h2 id="2-2-JWT工具类"><a href="#2-2-JWT工具类" class="headerlink" title="2.2.JWT工具类"></a>2.2.JWT工具类</h2><p>我们在<code>leyou-auth-common</code>中导入课前资料中的工具类：</p><p> <img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1533268835892.png" alt="1533268835892"></p><p>需要在<code>leyou-auth-common</code>中引入JWT依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-3-测试工具类"><a href="#2-3-测试工具类" class="headerlink" title="2.3.测试工具类"></a>2.3.测试工具类</h2><p>我们在<code>leyou-auth-common</code>中编写测试类：</p><p> <img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1533282579972.png" alt="1533282579972"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String pubKeyPath = <span class="string">&quot;C:\\tmp\\rsa\\rsa.pub&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String priKeyPath = <span class="string">&quot;C:\\tmp\\rsa\\rsa.pri&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PublicKey publicKey;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PrivateKey privateKey;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRsa</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        RsaUtils.generateKey(pubKeyPath, priKeyPath, <span class="string">&quot;234&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetRsa</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.publicKey = RsaUtils.getPublicKey(pubKeyPath);</span><br><span class="line">        <span class="keyword">this</span>.privateKey = RsaUtils.getPrivateKey(priKeyPath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGenerateToken</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 生成token</span></span><br><span class="line">        String token = JwtUtils.generateToken(<span class="keyword">new</span> UserInfo(<span class="number">20L</span>, <span class="string">&quot;jack&quot;</span>), privateKey, <span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;token = &quot;</span> + token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testParseToken</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String token = <span class="string">&quot;eyJhbGciOiJSUzI1NiJ9.eyJpZCI6MjAsInVzZXJuYW1lIjoiamFjayIsImV4cCI6MTUzMzI4MjQ3N30.EPo35Vyg1IwZAtXvAx2TCWuOPnRwPclRNAM4ody5CHk8RF55wdfKKJxjeGh4H3zgruRed9mEOQzWy79iF1nGAnvbkraGlD6iM-9zDW8M1G9if4MX579Mv1x57lFewzEo-zKnPdFJgGlAPtNWDPv4iKvbKOk1-U7NUtRmMsF1Wcg&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析token</span></span><br><span class="line">        UserInfo user = JwtUtils.getInfoFromToken(token, publicKey);</span><br><span class="line">        System.out.println(<span class="string">&quot;id: &quot;</span> + user.getId());</span><br><span class="line">        System.out.println(<span class="string">&quot;userName: &quot;</span> + user.getUsername());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试生成公钥和私钥，我们运行这段代码：</p><p><img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1533282630089.png" alt="1533282630089"></p><p>运行之后，查看目标目录：</p><p><img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1533282665940.png" alt="1533282665940"></p><p>公钥和私钥已经生成了！</p><p>测试生成token，把@Before的注释去掉的：</p><p><img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1533282760203.png" alt="1533282760203"></p><p><img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1533282875434.png" alt="1533282875434"></p><p>测试解析token：</p><p><img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1533282931796.png" alt="1533282931796"></p><p>正常情况：</p><p><img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1533282968301.png" alt="1533282968301"></p><p>任意改动token，发现报错了：</p><p><img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1533283024844.png" alt="1533283024844"></p><h2 id="2-3-编写登录授权接口"><a href="#2-3-编写登录授权接口" class="headerlink" title="2.3.编写登录授权接口"></a>2.3.编写登录授权接口</h2><p>接下来，我们需要在<code>leyou-auth-servcice</code>编写一个接口，对外提供登录授权服务。基本流程如下：</p><ul><li>客户端携带用户名和密码请求登录</li><li>授权中心调用客户中心接口，根据用户名和密码查询用户信息</li><li>如果用户名密码正确，能获取用户，否则为空，则登录失败</li><li>如果校验成功，则生成JWT并返回</li></ul><h3 id="2-3-1-生成公钥和私钥"><a href="#2-3-1-生成公钥和私钥" class="headerlink" title="2.3.1.生成公钥和私钥"></a>2.3.1.生成公钥和私钥</h3><p>我们需要在授权中心生成真正的公钥和私钥。我们必须有一个生成公钥和私钥的secret，这个可以配置到<code>application.yml</code>中：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">leyou:</span></span><br><span class="line">  <span class="attr">jwt:</span></span><br><span class="line">    <span class="attr">secret:</span> <span class="string">leyou@Login(Auth&#125;*^31)&amp;heiMa%</span> <span class="comment"># 登录校验的密钥</span></span><br><span class="line">    <span class="attr">pubKeyPath:</span> <span class="string">C:\\tmp\\rsa\\rsa.pub</span> <span class="comment"># 公钥地址</span></span><br><span class="line">    <span class="attr">priKeyPath:</span> <span class="string">C:\\tmp\\rsa\\rsa.pri</span> <span class="comment"># 私钥地址</span></span><br><span class="line">    <span class="attr">expire:</span> <span class="number">30</span> <span class="comment"># 过期时间,单位分钟</span></span><br></pre></td></tr></table></figure><p>然后编写属性类，加载这些数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;ly.jwt&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String secret; <span class="comment">// 密钥</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String pubKeyPath;<span class="comment">// 公钥</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String priKeyPath;<span class="comment">// 私钥</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> expire;<span class="comment">// token过期时间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PublicKey publicKey; <span class="comment">// 公钥</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PrivateKey privateKey; <span class="comment">// 私钥</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(JwtProperties.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@PostContruct</span>：在构造方法执行之后执行该方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            File pubKey = <span class="keyword">new</span> File(pubKeyPath);</span><br><span class="line">            File priKey = <span class="keyword">new</span> File(priKeyPath);</span><br><span class="line">            <span class="keyword">if</span> (!pubKey.exists() || !priKey.exists()) &#123;</span><br><span class="line">                <span class="comment">// 生成公钥和私钥</span></span><br><span class="line">                RsaUtils.generateKey(pubKeyPath, priKeyPath, secret);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 获取公钥和私钥</span></span><br><span class="line">            <span class="keyword">this</span>.publicKey = RsaUtils.getPublicKey(pubKeyPath);</span><br><span class="line">            <span class="keyword">this</span>.privateKey = RsaUtils.getPrivateKey(priKeyPath);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;初始化公钥和私钥失败！&quot;</span>, e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// getter setter ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-2-Controller"><a href="#2-3-2-Controller" class="headerlink" title="2.3.2.Controller"></a>2.3.2.Controller</h3><p>编写授权接口，我们接收用户名和密码，校验成功后，写入cookie中。</p><ul><li>请求方式：post</li><li>请求路径：/accredit</li><li>请求参数：username和password</li><li>返回结果：无</li></ul><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(JwtProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthService authService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtProperties prop;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录授权</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;accredit&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">authentication</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@RequestParam(&quot;username&quot;)</span> String username,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@RequestParam(&quot;password&quot;)</span> String password,</span></span></span><br><span class="line"><span class="function"><span class="params">            HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">            HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 登录校验</span></span><br><span class="line">        String token = <span class="keyword">this</span>.authService.authentication(username, password);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(token)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(HttpStatus.UNAUTHORIZED);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将token写入cookie,并指定httpOnly为true，防止通过JS获取和修改</span></span><br><span class="line">        CookieUtils.setCookie(request, response, prop.getCookieName(),</span><br><span class="line">                token, prop.getCookieMaxAge(), <span class="keyword">null</span>, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok().build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的cookie的name和生存时间，我们配置到属性文件：application.yml：</p><p><img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1533295409903.png" alt="1533295409903"></p><p>然后在<code>JwtProperties</code>中添加属性：</p><p><img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1533295465634.png" alt="1533295465634"></p><h3 id="2-3-3-CookieUtils"><a href="#2-3-3-CookieUtils" class="headerlink" title="2.3.3.CookieUtils"></a>2.3.3.CookieUtils</h3><p>要注意，这里我们使用了一个工具类，CookieUtils，可以在课前资料中找到，我们把它添加到<code>leyou-common</code>中，然后引入servlet相关依赖即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码：略</p><p> <img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1533295716082.png" alt="1533295716082"></p><h3 id="2-3-3-UserClient"><a href="#2-3-3-UserClient" class="headerlink" title="2.3.3.UserClient"></a>2.3.3.UserClient</h3><p>接下来我们肯定要对用户密码进行校验，所以我们需要通过FeignClient去访问 user-service微服务：</p><p>引入user-service依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.user<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou-user-interface<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写FeignClient：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;user-service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserClient</span> <span class="keyword">extends</span> <span class="title">UserApi</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在leyou-user-interface工程中添加api接口：</p><p> <img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1533296452053.png" alt="1533296452053"></p><p>内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserApi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;query&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryUser</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@RequestParam(&quot;username&quot;)</span> String username,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@RequestParam(&quot;password&quot;)</span> String password)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-4-Service"><a href="#2-3-4-Service" class="headerlink" title="2.3.4.Service"></a>2.3.4.Service</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserClient userClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtProperties properties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">authentication</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 调用微服务，执行查询</span></span><br><span class="line">            User user = <span class="keyword">this</span>.userClient.queryUser(username, password);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果查询结果为null，则直接返回null</span></span><br><span class="line">            <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果有查询结果，则生成token</span></span><br><span class="line">            String token = JwtUtils.generateToken(<span class="keyword">new</span> UserInfo(user.getId(), user.getUsername()),</span><br><span class="line">                    properties.getPrivateKey(), properties.getExpire());</span><br><span class="line">            <span class="keyword">return</span> token;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-5-项目结构"><a href="#2-3-5-项目结构" class="headerlink" title="2.3.5.项目结构"></a>2.3.5.项目结构</h3><p> <img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1533301291420.png" alt="1533301291420"></p><h3 id="2-3-6-测试"><a href="#2-3-6-测试" class="headerlink" title="2.3.6.测试"></a>2.3.6.测试</h3><p><img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1533301145953.png" alt="1533301145953"></p><h2 id="2-4-登录页面"><a href="#2-4-登录页面" class="headerlink" title="2.4.登录页面"></a>2.4.登录页面</h2><p>接下来，我们看看登录页面，是否能够正确的发出请求。</p><p>我们在页面输入登录信息，然后点击登录：</p><p> <img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1533301466739.png" alt="1533301466739"></p><p>查看控制台：</p><p><img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1533301495759.png" alt="1533301495759"></p><p>发现请求的路径不对，我们的认证接口是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;api&#x2F;auth&#x2F;accredit</span><br></pre></td></tr></table></figure><p>我们打开login.html，修改路径信息：</p><p> <img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1527517811770.png" alt="1527517811770"></p><p>页面ajax请求：</p><p> <img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1527517866435.png" alt="1527517866435"></p><p>然后再次测试，成功跳转到了首页：</p><p><img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1527518012727.png" alt="1527518012727"></p><h2 id="2-5-解决cookie写入问题"><a href="#2-5-解决cookie写入问题" class="headerlink" title="2.5.解决cookie写入问题"></a>2.5.解决cookie写入问题</h2><p>接下来我们查看首页cookie：</p><p><img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1533302034190.png" alt="1533302034190"></p><p>什么都没有，为什么？</p><h3 id="2-5-1-问题分析"><a href="#2-5-1-问题分析" class="headerlink" title="2.5.1.问题分析"></a>2.5.1.问题分析</h3><p>我们在之前测试时，清晰的看到了响应头中，有Set-Cookie属性，为什么在这里却什么都没有？</p><p>我们之前在讲cors跨域时，讲到过跨域请求cookie生效的条件：</p><ul><li>服务的响应头中需要携带Access-Control-Allow-Credentials并且为true。</li><li>响应头中的Access-Control-Allow-Origin一定不能为*，必须是指定的域名</li><li>浏览器发起ajax需要指定withCredentials 为true</li></ul><p>看看我们的服务端cors配置：</p><p> <img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1527518456220.png" alt="1527518456220"></p><p>没有任何问题。</p><p>再看客户端浏览器的ajax配置，我们在<code>js/common.js</code>中对axios进行了统一配置：</p><p> <img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1527518532739.png" alt="1527518532739"></p><p>一切OK。</p><p>那说明，问题一定出在响应的set-cookie头中。我们再次仔细看看刚才的响应头：</p><p><img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1527518649379.png" alt="1527518649379"></p><p>我们发现cookie的 <code>domain</code>属性似乎不太对。</p><p>cookie也是有<code>域</code> 的限制，<strong>一个网页，只能操作当前域名下的cookie</strong>，但是现在我们看到的地址是0.0.1，而页面是<a href="http://www.leyou.com,域名不匹配,cookie设置肯定失败了!/">www.leyou.com,域名不匹配，cookie设置肯定失败了！</a></p><h3 id="2-5-2-跟踪CookieUtils"><a href="#2-5-2-跟踪CookieUtils" class="headerlink" title="2.5.2.跟踪CookieUtils"></a>2.5.2.跟踪CookieUtils</h3><p>我们去Debug跟踪CookieUtils，看看到底是怎么回事：</p><p>我们发现内部有一个方法，用来获取Domain：</p><p><img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1533303181817.png" alt="1533303181817"></p><p>它获取domain是通过服务器的host来计算的，然而我们的地址竟然是：127.0.0.1:8087，因此后续的运算，最终得到的domain就变成了：</p><p><img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1533303213902.png" alt="1533303213902"></p><p>问题找到了：我们请求时的serverName明明是：api.leyou.com，现在却被变成了：127.0.0.1，因此计算domain是错误的，从而导致cookie设置失败！</p><h3 id="2-5-3-解决host地址的变化"><a href="#2-5-3-解决host地址的变化" class="headerlink" title="2.5.3.解决host地址的变化"></a>2.5.3.解决host地址的变化</h3><p>那么问题来了：为什么我们这里的请求serverName变成了：127.0.0.1:8087呢？</p><p>这里的server name其实就是请求时的主机名：Host，之所以改变，有两个原因：</p><ul><li>我们使用了nginx反向代理，当监听到api.leyou.com的时候，会自动将请求转发至127.0.0.1:10010，即Zuul。</li><li>而后请求到达我们的网关Zuul，Zuul就会根据路径匹配，我们的请求是/api/auth，根据规则被转发到了 127.0.0.1:8087 ，即我们的授权中心。</li></ul><p>我们首先去更改nginx配置，让它不要修改我们的host：<code>proxy_set_header Host $host;</code></p><p><img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1533303544219.png" alt="1533303544219"></p><p>把nginx进行reload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p>这样就解决了nginx这里的问题。但是Zuul还会有一次转发，所以要去修改网关的配置（leyou-gateway工程）：</p><p><img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1533303659673.png" alt="1533303659673"></p><p>重启后，我们再次测试。</p><p><img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1533716093162.png" alt="1533716093162"></p><p>最后计算得到的domain：</p><p><img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1533716136698.png" alt="1533716136698"></p><p>完美！</p><h3 id="2-5-4-再次测试"><a href="#2-5-4-再次测试" class="headerlink" title="2.5.4.再次测试"></a>2.5.4.再次测试</h3><p>我们再次登录，发现依然没有cookie！！</p><p><img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/01348FC2.gif" alt="img"> </p><p>怎么回事呢？</p><p>我们通过RestClient访问下看看：</p><p><img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1527520407803.png" alt="1527520407803"></p><p>发现，响应头中根本没有<code>set-cookie</code>了。</p><p>这是怎么回事？？</p><h3 id="2-5-5-Zuul的敏感头过滤"><a href="#2-5-5-Zuul的敏感头过滤" class="headerlink" title="2.5.5.Zuul的敏感头过滤"></a>2.5.5.Zuul的敏感头过滤</h3><p>Zuul内部有默认的过滤器，会对请求和响应头信息进行重组，过滤掉敏感的头信息：</p><p><img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1533732985089.png" alt="1533732985089"></p><p>会发现，这里会通过一个属性为<code>SensitiveHeaders</code>的属性，来获取敏感头列表，然后添加到<code>IgnoredHeaders</code>中，这些头信息就会被忽略。</p><p>而这个<code>SensitiveHeaders</code>的默认值就包含了<code>set-cookie</code>：</p><p><img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1533733081367.png" alt="1533733081367"></p><p>解决方案有两种：</p><p>全局设置：</p><ul><li><code>zuul.sensitive-headers=</code> </li></ul><p>指定路由设置：</p><ul><li><code>zuul.routes.&lt;routeName&gt;.sensitive-headers=</code></li><li><code>zuul.routes.&lt;routeName&gt;.custom-sensitive-headers=true</code></li></ul><p>思路都是把敏感头设置为null</p><p><img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1533733356133.png" alt="1533733356133"></p><h3 id="2-5-6-最后的测试"><a href="#2-5-6-最后的测试" class="headerlink" title="2.5.6.最后的测试"></a>2.5.6.最后的测试</h3><p>再次重启后测试：</p><p><img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1533733550548.png" alt="1533733550548"></p><h1 id="3-首页判断登录状态"><a href="#3-首页判断登录状态" class="headerlink" title="3.首页判断登录状态"></a>3.首页判断登录状态</h1><p>虽然cookie已经成功写入，但是我们首页的顶部，登录状态依然没能判断出用户信息：</p><p><img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1533733618901.png" alt="1533733618901"></p><p>这里需要向后台发起请求，根据cookie获取当前用户的信息。</p><p>我们先看页面实现</p><h2 id="3-1-页面JS代码"><a href="#3-1-页面JS代码" class="headerlink" title="3.1.页面JS代码"></a>3.1.页面JS代码</h2><p>页面的顶部已经被我们封装为一个独立的Vue组件，在<code>/js/pages/shortcut.js</code>中</p><p> <img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1533733732779.png" alt="1533733732779"></p><p>打开js，发现里面已经定义好了Vue组件，并且在created函数中，查询用户信息：</p><p><img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1533733810408.png" alt="1533733810408"></p><p>查看网络控制台，发现发起了请求：</p><p><img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1533733946470.png" alt="1533733946470"></p><p>因为token在cookie中，因此本次请求肯定会携带token信息在头中。</p><h2 id="3-2-后台实现校验用户接口"><a href="#3-2-后台实现校验用户接口" class="headerlink" title="3.2.后台实现校验用户接口"></a>3.2.后台实现校验用户接口</h2><p>我们在<code>leyou-auth-service</code>中定义用户的校验接口，通过cookie获取token，然后校验通过返回用户信息。</p><ul><li>请求方式：GET</li><li>请求路径：/verify</li><li>请求参数：无，不过我们需要从cookie中获取token信息</li><li>返回结果：UserInfo，校验成功返回用户信息；校验失败，则返回401</li></ul><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 验证用户信息</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;verify&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;UserInfo&gt; <span class="title">verifyUser</span><span class="params">(<span class="meta">@CookieValue(&quot;LY_TOKEN&quot;)</span>String token)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 从token中解析token信息</span></span><br><span class="line">        UserInfo userInfo = JwtUtils.getInfoFromToken(token, <span class="keyword">this</span>.properties.getPublicKey());</span><br><span class="line">        <span class="comment">// 解析成功返回用户信息</span></span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(userInfo);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 出现异常则，响应500</span></span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-测试"><a href="#3-3-测试" class="headerlink" title="3.3.测试"></a>3.3.测试</h2><p><img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1533734761745.png" alt="1533734761745"></p><p><img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1533734803538.png" alt="1533734803538"></p><p>页面效果：</p><p><img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1533734834479.png" alt="1533734834479"></p><h2 id="3-4-刷新token"><a href="#3-4-刷新token" class="headerlink" title="3.4.刷新token"></a>3.4.刷新token</h2><p>每当用户在页面进行新的操作，都应该刷新token的过期时间，否则30分钟后用户的登录信息就无效了。而刷新其实就是重新生成一份token，然后写入cookie即可。</p><p>那么问题来了：我们怎么知道用户有操作呢？</p><p>事实上，每当用户来查询其个人信息，就证明他正在浏览网页，此时刷新cookie是比较合适的时机。因此我们可以对刚刚的校验用户登录状态的接口进行改进，加入刷新token的逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 验证用户信息</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;verify&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;UserInfo&gt; <span class="title">verifyUser</span><span class="params">(<span class="meta">@CookieValue(&quot;LY_TOKEN&quot;)</span>String token, HttpServletRequest request, HttpServletResponse response)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 从token中解析token信息</span></span><br><span class="line">        UserInfo userInfo = JwtUtils.getInfoFromToken(token, <span class="keyword">this</span>.properties.getPublicKey());</span><br><span class="line">        <span class="comment">// 解析成功要重新刷新token</span></span><br><span class="line">        token = JwtUtils.generateToken(userInfo, <span class="keyword">this</span>.properties.getPrivateKey(), <span class="keyword">this</span>.properties.getExpire());</span><br><span class="line">        <span class="comment">// 更新cookie中的token</span></span><br><span class="line">        CookieUtils.setCookie(request, response, <span class="keyword">this</span>.properties.getCookieName(), token, <span class="keyword">this</span>.properties.getCookieMaxAge());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析成功返回用户信息</span></span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(userInfo);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 出现异常则，响应500</span></span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-网关的登录拦截器"><a href="#4-网关的登录拦截器" class="headerlink" title="4.网关的登录拦截器"></a>4.网关的登录拦截器</h1><p>接下来，我们在Zuul编写拦截器，对用户的token进行校验，如果发现未登录，则进行拦截。</p><h2 id="4-1-引入jwt相关配置"><a href="#4-1-引入jwt相关配置" class="headerlink" title="4.1.引入jwt相关配置"></a>4.1.引入jwt相关配置</h2><p>既然是登录拦截，一定是前置拦截器，我们在<code>leyou-gateway</code>中定义。</p><p>首先在pom.xml中，引入所需要的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.common<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.auth<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou-auth-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后编写application.yml属性文件，添加如下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">leyou:</span></span><br><span class="line">  <span class="attr">jwt:</span></span><br><span class="line">    <span class="attr">pubKeyPath:</span>  <span class="string">C:\\tmp\\rsa\\rsa.pub</span> <span class="comment"># 公钥地址</span></span><br><span class="line">    <span class="attr">cookieName:</span> <span class="string">LY_TOKEN</span> <span class="comment"># cookie的名称</span></span><br></pre></td></tr></table></figure><p>编写属性类，读取公钥：</p><p> <img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1533736124053.png" alt="1533736124053"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;leyou.jwt&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String pubKeyPath;<span class="comment">// 公钥</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PublicKey publicKey; <span class="comment">// 公钥</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String cookieName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(JwtProperties.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取公钥和私钥</span></span><br><span class="line">            <span class="keyword">this</span>.publicKey = RsaUtils.getPublicKey(pubKeyPath);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;初始化公钥失败！&quot;</span>, e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPubKeyPath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pubKeyPath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPubKeyPath</span><span class="params">(String pubKeyPath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pubKeyPath = pubKeyPath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PublicKey <span class="title">getPublicKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> publicKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPublicKey</span><span class="params">(PublicKey publicKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.publicKey = publicKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCookieName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cookieName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCookieName</span><span class="params">(String cookieName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cookieName = cookieName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-编写过滤器逻辑"><a href="#4-2-编写过滤器逻辑" class="headerlink" title="4.2.编写过滤器逻辑"></a>4.2.编写过滤器逻辑</h2><p>基本逻辑：</p><ul><li><p>获取cookie中的token</p></li><li><p>通过JWT对token进行校验</p></li><li><p>通过：则放行；不通过：则重定向到登录页</p><p><img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1527557510032.png" alt="1527557510032"></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(JwtProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtProperties properties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;pre&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取上下文</span></span><br><span class="line">        RequestContext context = RequestContext.getCurrentContext();</span><br><span class="line">        <span class="comment">// 获取request</span></span><br><span class="line">        HttpServletRequest request = context.getRequest();</span><br><span class="line">        <span class="comment">// 获取token</span></span><br><span class="line">        String token = CookieUtils.getCookieValue(request, <span class="keyword">this</span>.properties.getCookieName());</span><br><span class="line">        <span class="comment">// 校验</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 校验通过什么都不做，即放行</span></span><br><span class="line">            JwtUtils.getInfoFromToken(token, <span class="keyword">this</span>.properties.getPublicKey());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 校验出现异常，返回403</span></span><br><span class="line">            context.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">            context.setResponseStatusCode(HttpStatus.FORBIDDEN.value());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启，刷新页面，发现请求校验的接口也被拦截了：</p><p><img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1533737074966.png" alt="1533737074966"></p><p>证明我们的拦截器生效了，但是，似乎有什么不对的。这个路径似乎不应该被拦截啊！</p><h2 id="4-3-白名单"><a href="#4-3-白名单" class="headerlink" title="4.3.白名单"></a>4.3.白名单</h2><p>要注意，并不是所有的路径我们都需要拦截，例如：</p><ul><li>登录校验接口：<code>/auth/**</code></li><li>注册接口：<code>/user/register</code></li><li>数据校验接口：<code>/user/check/**</code></li><li>发送验证码接口：<code>/user/code</code></li><li>搜索接口：<code>/search/**</code></li></ul><p>另外，跟后台管理相关的接口，因为我们没有做登录和权限，因此暂时都放行，但是生产环境中要做登录校验：</p><ul><li>后台商品服务：<code>/item/**</code></li></ul><p>所以，我们需要在拦截时，配置一个白名单，如果在名单内，则不进行拦截。</p><p>在<code>application.yaml</code>中添加规则：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">leyou:</span></span><br><span class="line">  <span class="attr">filter:</span></span><br><span class="line">    <span class="attr">allowPaths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/api/auth</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/api/search</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/api/user/register</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/api/user/check</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/api/user/code</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/api/item</span></span><br></pre></td></tr></table></figure><p>然后读取这些属性：</p><p> <img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1533737234087.png" alt="1533737234087"></p><p>内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;leyou.filter&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; allowPaths;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getAllowPaths</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> allowPaths;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAllowPaths</span><span class="params">(List&lt;String&gt; allowPaths)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.allowPaths = allowPaths;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在过滤器中的<code>shouldFilter</code>方法中添加判断逻辑：</p><p><img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1533737832161.png" alt="1533737832161"></p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;JwtProperties.class, FilterProperties.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtProperties jwtProp;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FilterProperties filterProp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(LoginFilter.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;pre&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取上下文</span></span><br><span class="line">        RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">        <span class="comment">// 获取request</span></span><br><span class="line">        HttpServletRequest req = ctx.getRequest();</span><br><span class="line">        <span class="comment">// 获取路径</span></span><br><span class="line">        String requestURI = req.getRequestURI();</span><br><span class="line">        <span class="comment">// 判断白名单</span></span><br><span class="line">        <span class="keyword">return</span> !isAllowPath(requestURI);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isAllowPath</span><span class="params">(String requestURI)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定义一个标记</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// 遍历允许访问的路径</span></span><br><span class="line">        <span class="keyword">for</span> (String path : <span class="keyword">this</span>.filterProp.getAllowPaths()) &#123;</span><br><span class="line">            <span class="comment">// 然后判断是否是符合</span></span><br><span class="line">            <span class="keyword">if</span>(requestURI.startsWith(path))&#123;</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取上下文</span></span><br><span class="line">        RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">        <span class="comment">// 获取request</span></span><br><span class="line">        HttpServletRequest request = ctx.getRequest();</span><br><span class="line">        <span class="comment">// 获取token</span></span><br><span class="line">        String token = CookieUtils.getCookieValue(request, jwtProp.getCookieName());</span><br><span class="line">        <span class="comment">// 校验</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 校验通过什么都不做，即放行</span></span><br><span class="line">            JwtUtils.getInfoFromToken(token, jwtProp.getPublicKey());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 校验出现异常，返回403</span></span><br><span class="line">            ctx.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">            ctx.setResponseStatusCode(<span class="number">403</span>);</span><br><span class="line">            logger.error(<span class="string">&quot;非法访问，未登录，地址：&#123;&#125;&quot;</span>, request.getRemoteHost(), e );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次测试：</p><p><img src="/2018/10/24/leyou/day17-bi-ji/day17-shou-quan-zhong-xin/1533737743491.png" alt="1533737743491"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2018/10/21/leyou/day15-bi-ji/day15-rabbitmq-ji-shu-ju-tong-bu/"/>
      <url>2018/10/21/leyou/day15-bi-ji/day15-rabbitmq-ji-shu-ju-tong-bu/</url>
      
        <content type="html"><![CDATA[<h1 id="0-学习目标"><a href="#0-学习目标" class="headerlink" title="0.学习目标"></a>0.学习目标</h1><ul><li>了解常见的MQ产品</li><li>了解RabbitMQ的5种消息模型</li><li>会使用Spring AMQP</li><li>利用MQ实现搜索和静态页的数据同步</li></ul><h1 id="1-RabbitMQ"><a href="#1-RabbitMQ" class="headerlink" title="1.RabbitMQ"></a>1.RabbitMQ</h1><h2 id="1-1-搜索与商品服务的问题"><a href="#1-1-搜索与商品服务的问题" class="headerlink" title="1.1.搜索与商品服务的问题"></a>1.1.搜索与商品服务的问题</h2><p>目前我们已经完成了商品详情和搜索系统的开发。我们思考一下，是否存在问题？</p><ul><li>商品的原始数据保存在数据库中，增删改查都在数据库中完成。</li><li>搜索服务数据来源是索引库，如果数据库商品发生变化，索引库数据不能及时更新。</li><li>商品详情做了页面静态化，静态页面数据也不会随着数据库商品发生变化。</li></ul><p>如果我们在后台修改了商品的价格，搜索页面和商品详情页显示的依然是旧的价格，这样显然不对。该如何解决？</p><p>这里有两种解决方案：</p><ul><li>方案1：每当后台对商品做增删改操作，同时要修改索引库数据及静态页面</li><li>方案2：搜索服务和商品页面服务对外提供操作接口，后台在商品增删改后，调用接口</li></ul><p>以上两种方式都有同一个严重问题：就是代码耦合，后台服务中需要嵌入搜索和商品页面服务，违背了微服务的<code>独立</code>原则。</p><p>所以，我们会通过另外一种方式来解决这个问题：消息队列</p><h2 id="1-2-消息队列（MQ）"><a href="#1-2-消息队列（MQ）" class="headerlink" title="1.2.消息队列（MQ）"></a>1.2.消息队列（MQ）</h2><h3 id="1-2-1-什么是消息队列"><a href="#1-2-1-什么是消息队列" class="headerlink" title="1.2.1.什么是消息队列"></a>1.2.1.什么是消息队列</h3><p>消息队列，即MQ，Message Queue。</p><p><img src="/2018/10/21/leyou/day15-bi-ji/day15-rabbitmq-ji-shu-ju-tong-bu/1527063872737.png" alt="1527063872737"></p><p>消息队列是典型的：生产者、消费者模型。生产者不断向消息队列中生产消息，消费者不断的从队列中获取消息。因为消息的生产和消费都是异步的，而且只关心消息的发送和接收，没有业务逻辑的侵入，这样就实现了生产者和消费者的解耦。</p><p>结合前面所说的问题：</p><ul><li>商品服务对商品增删改以后，无需去操作索引库或静态页面，只是发送一条消息，也不关心消息被谁接收。</li><li>搜索服务和静态页面服务接收消息，分别去处理索引库和静态页面。</li></ul><p>如果以后有其它系统也依赖商品服务的数据，同样监听消息即可，商品服务无需任何代码修改。</p><h3 id="1-2-2-AMQP和JMS"><a href="#1-2-2-AMQP和JMS" class="headerlink" title="1.2.2.AMQP和JMS"></a>1.2.2.AMQP和JMS</h3><p>MQ是消息通信的模型，并不是具体实现。现在实现MQ的有两种主流方式：AMQP、JMS。</p><p><img src="/2018/10/21/leyou/day15-bi-ji/day15-rabbitmq-ji-shu-ju-tong-bu/1527064480681.png" alt="1527064480681"></p><p><img src="/2018/10/21/leyou/day15-bi-ji/day15-rabbitmq-ji-shu-ju-tong-bu/1527064487042.png" alt="1527064487042"></p><p>两者间的区别和联系：</p><ul><li>JMS是定义了统一的接口，来对消息操作进行统一；AMQP是通过规定协议来统一数据交互的格式</li><li>JMS限定了必须使用Java语言；AMQP只是协议，不规定实现方式，因此是跨语言的。</li><li>JMS规定了两种消息模型；而AMQP的消息模型更加丰富</li></ul><h3 id="1-2-3-常见MQ产品"><a href="#1-2-3-常见MQ产品" class="headerlink" title="1.2.3.常见MQ产品"></a>1.2.3.常见MQ产品</h3><p><img src="/2018/10/21/leyou/day15-bi-ji/day15-rabbitmq-ji-shu-ju-tong-bu/1527064606029.png" alt="1527064606029"></p><ul><li>ActiveMQ：基于JMS</li><li>RabbitMQ：基于AMQP协议，erlang语言开发，稳定性好</li><li>RocketMQ：基于JMS，阿里巴巴产品，目前交由Apache基金会</li><li>Kafka：分布式消息系统，高吞吐量</li></ul><h3 id="1-2-4-RabbitMQ"><a href="#1-2-4-RabbitMQ" class="headerlink" title="1.2.4.RabbitMQ"></a>1.2.4.RabbitMQ</h3><p>RabbitMQ是基于AMQP的一款消息管理系统</p><p>官网： <a href="http://www.rabbitmq.com/">http://www.rabbitmq.com/</a></p><p>官方教程：<a href="http://www.rabbitmq.com/getstarted.html">http://www.rabbitmq.com/getstarted.html</a></p><p><img src="/2018/10/21/leyou/day15-bi-ji/day15-rabbitmq-ji-shu-ju-tong-bu/1532758972119.png" alt="1532758972119"></p><p> <img src="/2018/10/21/leyou/day15-bi-ji/day15-rabbitmq-ji-shu-ju-tong-bu/1527064762982.png" alt="1527064762982"></p><h2 id="1-3-下载和安装"><a href="#1-3-下载和安装" class="headerlink" title="1.3.下载和安装"></a>1.3.下载和安装</h2><h3 id="1-3-1-下载"><a href="#1-3-1-下载" class="headerlink" title="1.3.1.下载"></a>1.3.1.下载</h3><p>官网下载地址：<a href="http://www.rabbitmq.com/download.html">http://www.rabbitmq.com/download.html</a></p><p><img src="/2018/10/21/leyou/day15-bi-ji/day15-rabbitmq-ji-shu-ju-tong-bu/1532759070767.png" alt="1532759070767"></p><p>目前最新版本是：3.7.5</p><p>我们的课程中使用的是：3.4.1版本</p><p>课前资料提供了安装包：</p><p><img src="/2018/10/21/leyou/day15-bi-ji/day15-rabbitmq-ji-shu-ju-tong-bu/1532761948333.png" alt="1532761948333"></p><h3 id="1-3-2-安装"><a href="#1-3-2-安装" class="headerlink" title="1.3.2.安装"></a>1.3.2.安装</h3><p>详见课前资料中的：</p><p><img src="/2018/10/21/leyou/day15-bi-ji/day15-rabbitmq-ji-shu-ju-tong-bu/1532761916357.png" alt="1532761916357"></p><h1 id="2-五种消息模型"><a href="#2-五种消息模型" class="headerlink" title="2.五种消息模型"></a>2.五种消息模型</h1><p>RabbitMQ提供了6种消息模型，但是第6种其实是RPC，并不是MQ，因此不予学习。那么也就剩下5种。</p><p>但是其实3、4、5这三种都属于订阅模型，只不过进行路由的方式不同。</p><p><img src="/2018/10/21/leyou/day15-bi-ji/day15-rabbitmq-ji-shu-ju-tong-bu/1527068544487.png" alt="1527068544487"></p><p>我们通过一个demo工程来了解下RabbitMQ的工作方式：</p><p>导入工程：</p><p><img src="/2018/10/21/leyou/day15-bi-ji/day15-rabbitmq-ji-shu-ju-tong-bu/1532762038694.png" alt="1532762038694"></p><p>导入后：</p><p> <img src="/2018/10/21/leyou/day15-bi-ji/day15-rabbitmq-ji-shu-ju-tong-bu/1532762308507.png" alt="1532762308507"></p><p>依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>itcast-rabbitmq<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们抽取一个建立RabbitMQ连接的工具类，方便其他程序获取连接：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 建立与RabbitMQ的连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//定义连接工厂</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//设置服务地址</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;192.168.56.101&quot;</span>);</span><br><span class="line">        <span class="comment">//端口</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        <span class="comment">//设置账号信息，用户名、密码、vhost</span></span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/leyou&quot;</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;leyou&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;leyou&quot;</span>);</span><br><span class="line">        <span class="comment">// 通过工程获取连接</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-1-基本消息模型"><a href="#2-1-基本消息模型" class="headerlink" title="2.1.基本消息模型"></a>2.1.基本消息模型</h2><p>官方介绍：</p><p> <img src="/2018/10/21/leyou/day15-bi-ji/day15-rabbitmq-ji-shu-ju-tong-bu/1532762961149.png" alt="1532762961149"></p><p>RabbitMQ是一个消息代理：它接受和转发消息。 你可以把它想象成一个邮局：当你把邮件放在邮箱里时，你可以确定邮差先生最终会把邮件发送给你的收件人。 在这个比喻中，RabbitMQ是邮政信箱，邮局和邮递员。</p><p>RabbitMQ与邮局的主要区别是它不处理纸张，而是接受，存储和转发数据消息的二进制数据块。</p><p> <img src="/2018/10/21/leyou/day15-bi-ji/day15-rabbitmq-ji-shu-ju-tong-bu/1532762975546.png" alt="1532762975546"></p><p>P（producer/ publisher）：生产者，一个发送消息的用户应用程序。</p><p>C（consumer）：消费者，消费和接收有类似的意思，消费者是一个主要用来等待接收消息的用户应用程序</p><p>队列（红色区域）：rabbitmq内部类似于邮箱的一个概念。虽然消息流经rabbitmq和你的应用程序，但是它们只能存储在队列中。队列只受主机的内存和磁盘限制，实质上是一个大的消息缓冲区。许多生产者可以发送消息到一个队列，许多消费者可以尝试从一个队列接收数据。</p><p>总之：</p><p>生产者将消息发送到队列，消费者从队列中获取消息，队列是存储消息的缓冲区。</p><p>我们将用Java编写两个程序;发送单个消息的生产者，以及接收消息并将其打印出来的消费者。我们将详细介绍Java API中的一些细节，这是一个消息传递的“Hello World”。</p><p>我们将调用我们的消息发布者（发送者）Send和我们的消息消费者（接收者）Recv。发布者将连接到RabbitMQ，发送一条消息，然后退出。</p><h3 id="2-1-1-生产者发送消息"><a href="#2-1-1-生产者发送消息" class="headerlink" title="2.1.1.生产者发送消息"></a>2.1.1.生产者发送消息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">&quot;simple_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接以及mq通道</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 从连接中创建通道，这是完成大部分API的地方。</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明（创建）队列，必须声明队列才能够发送消息，我们可以把消息发送到队列中。</span></span><br><span class="line">        <span class="comment">// 声明一个队列是幂等的 - 只有当它不存在时才会被创建</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 消息内容</span></span><br><span class="line">        String message = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">        channel.basicPublish(<span class="string">&quot;&quot;</span>, QUEUE_NAME, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">&quot; [x] Sent &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭通道和连接</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台：</p><p><img src="/2018/10/21/leyou/day15-bi-ji/day15-rabbitmq-ji-shu-ju-tong-bu/1532763328424.png" alt="1532763328424"></p><h3 id="2-1-2-管理工具中查看消息"><a href="#2-1-2-管理工具中查看消息" class="headerlink" title="2.1.2.管理工具中查看消息"></a>2.1.2.管理工具中查看消息</h3><p>进入队列页面，可以看到新建了一个队列：simple_queue</p><p><img src="/2018/10/21/leyou/day15-bi-ji/day15-rabbitmq-ji-shu-ju-tong-bu/1532763817830.png" alt="1532763817830"></p><p>点击队列名称，进入详情页，可以查看消息：</p><p><img src="/2018/10/21/leyou/day15-bi-ji/day15-rabbitmq-ji-shu-ju-tong-bu/1532763489858.png" alt="1532763489858"></p><p>在控制台查看消息并不会将消息消费，所以消息还在。</p><h3 id="2-1-3-消费者获取消息"><a href="#2-1-3-消费者获取消息" class="headerlink" title="2.1.3.消费者获取消息"></a>2.1.3.消费者获取消息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">&quot;simple_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 创建通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">// body 即消息体</span></span><br><span class="line">                String msg = <span class="keyword">new</span> String(body);</span><br><span class="line">                System.out.println(<span class="string">&quot; [x] received : &quot;</span> + msg + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 监听队列，第二个参数：是否自动进行消息确认。</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台：</p><p><img src="/2018/10/21/leyou/day15-bi-ji/day15-rabbitmq-ji-shu-ju-tong-bu/1532763733443.png" alt="1532763733443"></p><p>这个时候，队列中的消息就没了：</p><p><img src="/2018/10/21/leyou/day15-bi-ji/day15-rabbitmq-ji-shu-ju-tong-bu/1532763773208.png" alt="1532763773208"></p><p>我们发现，消费者已经获取了消息，但是程序没有停止，一直在监听队列中是否有新的消息。一旦有新的消息进入队列，就会立即打印.</p><h3 id="2-1-4-消息确认机制（ACK）"><a href="#2-1-4-消息确认机制（ACK）" class="headerlink" title="2.1.4.消息确认机制（ACK）"></a>2.1.4.消息确认机制（ACK）</h3><p>通过刚才的案例可以看出，消息一旦被消费者接收，队列中的消息就会被删除。</p><p>那么问题来了：RabbitMQ怎么知道消息被接收了呢？</p><p>如果消费者领取消息后，还没执行操作就挂掉了呢？或者抛出了异常？消息消费失败，但是RabbitMQ无从得知，这样消息就丢失了！</p><p>因此，RabbitMQ有一个ACK机制。当消费者获取消息后，会向RabbitMQ发送回执ACK，告知消息已经被接收。不过这种回执ACK分两种情况：</p><ul><li>自动ACK：消息一旦被接收，消费者自动发送ACK</li><li>手动ACK：消息接收后，不会发送ACK，需要手动调用</li></ul><p>大家觉得哪种更好呢？</p><p>这需要看消息的重要性：</p><ul><li>如果消息不太重要，丢失也没有影响，那么自动ACK会比较方便</li><li>如果消息非常重要，不容丢失。那么最好在消费完成后手动ACK，否则接收消息后就自动ACK，RabbitMQ就会把消息从队列中删除。如果此时消费者宕机，那么消息就丢失了。</li></ul><p>我们之前的测试都是自动ACK的，如果要手动ACK，需要改动我们的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">&quot;simple_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 创建通道</span></span><br><span class="line">        <span class="keyword">final</span> Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">// body 即消息体</span></span><br><span class="line">                String msg = <span class="keyword">new</span> String(body);</span><br><span class="line">                System.out.println(<span class="string">&quot; [x] received : &quot;</span> + msg + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">                <span class="comment">// 手动进行ACK</span></span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 监听队列，第二个参数false，手动进行ACK</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">false</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到最后一行代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.basicConsume(QUEUE_NAME, <span class="keyword">false</span>, consumer);</span><br></pre></td></tr></table></figure><p>如果第二个参数为true，则会自动进行ACK；如果为false，则需要手动ACK。方法的声明：</p><p><img src="/2018/10/21/leyou/day15-bi-ji/day15-rabbitmq-ji-shu-ju-tong-bu/1532764253019.png" alt="1532764253019"></p><h4 id="2-1-4-1-自动ACK存在的问题"><a href="#2-1-4-1-自动ACK存在的问题" class="headerlink" title="2.1.4.1.自动ACK存在的问题"></a>2.1.4.1.自动ACK存在的问题</h4><p>修改消费者，添加异常，如下：</p><p><img src="/2018/10/21/leyou/day15-bi-ji/day15-rabbitmq-ji-shu-ju-tong-bu/1532764600849.png" alt="1532764600849"></p><p>生产者不做任何修改，直接运行，消息发送成功：</p><p><img src="/2018/10/21/leyou/day15-bi-ji/day15-rabbitmq-ji-shu-ju-tong-bu/1532764694290.png" alt="1532764694290"></p><p>运行消费者，程序抛出异常。但是消息依然被消费：</p><p><img src="/2018/10/21/leyou/day15-bi-ji/day15-rabbitmq-ji-shu-ju-tong-bu/1532764717995.png" alt="1532764717995"></p><p>管理界面：</p><p><img src="/2018/10/21/leyou/day15-bi-ji/day15-rabbitmq-ji-shu-ju-tong-bu/1532764734232.png" alt="1532764734232"></p><h4 id="2-1-4-2-演示手动ACK"><a href="#2-1-4-2-演示手动ACK" class="headerlink" title="2.1.4.2.演示手动ACK"></a>2.1.4.2.演示手动ACK</h4><p>修改消费者，把自动改成手动（去掉之前制造的异常）</p><p><img src="/2018/10/21/leyou/day15-bi-ji/day15-rabbitmq-ji-shu-ju-tong-bu/1532764831241.png" alt="1532764831241"></p><p>生产者不变，再次运行：</p><p><img src="/2018/10/21/leyou/day15-bi-ji/day15-rabbitmq-ji-shu-ju-tong-bu/1532764895239.png" alt="1532764895239"></p><p>运行消费者</p><p><img src="/2018/10/21/leyou/day15-bi-ji/day15-rabbitmq-ji-shu-ju-tong-bu/1532764957092.png" alt="1532764957092"></p><p>但是，查看管理界面，发现：</p><p><img src="/2018/10/21/leyou/day15-bi-ji/day15-rabbitmq-ji-shu-ju-tong-bu/1532765013834.png" alt="1532765013834"></p><p>停掉消费者的程序，发现：</p><p><img src="/2018/10/21/leyou/day15-bi-ji/day15-rabbitmq-ji-shu-ju-tong-bu/1532765038088.png" alt="1532765038088"></p><p>这是因为虽然我们设置了手动ACK，但是代码中并没有进行消息确认！所以消息并未被真正消费掉。</p><p>当我们关掉这个消费者，消息的状态再次称为Ready</p><p>修改代码手动ACK：</p><p><img src="/2018/10/21/leyou/day15-bi-ji/day15-rabbitmq-ji-shu-ju-tong-bu/1532765123282.png" alt="1532765123282"></p><p>执行：</p><p><img src="/2018/10/21/leyou/day15-bi-ji/day15-rabbitmq-ji-shu-ju-tong-bu/1532765151039.png" alt="1532765151039"></p><p>消息消费成功！</p><h2 id="2-2-work消息模型"><a href="#2-2-work消息模型" class="headerlink" title="2.2.work消息模型"></a>2.2.work消息模型</h2><p>工作队列或者竞争消费者模式</p><p> <img src="/2018/10/21/leyou/day15-bi-ji/day15-rabbitmq-ji-shu-ju-tong-bu/1532765197277.png" alt="1532765197277"></p><p>在第一篇教程中，我们编写了一个程序，从一个命名队列中发送并接受消息。在这里，我们将创建一个工作队列，在多个工作者之间分配耗时任务。</p><p>工作队列，又称任务队列。主要思想就是避免执行资源密集型任务时，必须等待它执行完成。相反我们稍后完成任务，我们将任务封装为消息并将其发送到队列。 在后台运行的工作进程将获取任务并最终执行作业。当你运行许多工人时，任务将在他们之间共享，但是一个消息只能被一个消费者获取。</p><p>这个概念在Web应用程序中特别有用，因为在短的HTTP请求窗口中无法处理复杂的任务。</p><p>接下来我们来模拟这个流程：</p><p>​    P：生产者：任务的发布者</p><p>​    C1：消费者，领取任务并且完成任务，假设完成速度较快</p><p>​    C2：消费者2：领取任务并完成任务，假设完成速度慢</p><p>面试题：避免消息堆积？</p><p>1） 采用workqueue，多个消费者监听同一队列。</p><p>2）接收到消息以后，而是通过线程池，异步消费。</p><h3 id="2-2-1-生产者"><a href="#2-2-1-生产者" class="headerlink" title="2.2.1.生产者"></a>2.2.1.生产者</h3><p>生产者与案例1中的几乎一样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">&quot;test_work_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 循环发布任务</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 消息内容</span></span><br><span class="line">            String message = <span class="string">&quot;task .. &quot;</span> + i;</span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>, QUEUE_NAME, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">            System.out.println(<span class="string">&quot; [x] Sent &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line"></span><br><span class="line">            Thread.sleep(i * <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭通道和连接</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过这里我们是循环发送50条消息。</p><h3 id="2-2-2-消费者1"><a href="#2-2-2-消费者1" class="headerlink" title="2.2.2.消费者1"></a>2.2.2.消费者1</h3><p><img src="/2018/10/21/leyou/day15-bi-ji/day15-rabbitmq-ji-shu-ju-tong-bu/1527085386747.png" alt="1527085386747"></p><h3 id="2-2-3-消费者2"><a href="#2-2-3-消费者2" class="headerlink" title="2.2.3.消费者2"></a>2.2.3.消费者2</h3><p><img src="/2018/10/21/leyou/day15-bi-ji/day15-rabbitmq-ji-shu-ju-tong-bu/1527085448377.png" alt="1527085448377"></p><p>与消费者1基本类似，就是没有设置消费耗时时间。</p><p>这里是模拟有些消费者快，有些比较慢。</p><p>接下来，两个消费者一同启动，然后发送50条消息：</p><p><img src="/2018/10/21/leyou/day15-bi-ji/day15-rabbitmq-ji-shu-ju-tong-bu/1527085826462.png" alt="1527085826462"></p><p>可以发现，两个消费者各自消费了25条消息，而且各不相同，这就实现了任务的分发。</p><h3 id="2-2-4-能者多劳"><a href="#2-2-4-能者多劳" class="headerlink" title="2.2.4.能者多劳"></a>2.2.4.能者多劳</h3><p>刚才的实现有问题吗？</p><ul><li>消费者1比消费者2的效率要低，一次任务的耗时较长</li><li>然而两人最终消费的消息数量是一样的</li><li>消费者2大量时间处于空闲状态，消费者1一直忙碌</li></ul><p>现在的状态属于是把任务平均分配，正确的做法应该是消费越快的人，消费的越多。</p><p>怎么实现呢？</p><p>我们可以使用basicQos方法和prefetchCount = 1设置。 这告诉RabbitMQ一次不要向工作人员发送多于一条消息。 或者换句话说，不要向工作人员发送新消息，直到它处理并确认了前一个消息。 相反，它会将其分派给不是仍然忙碌的下一个工作人员。</p><p><img src="/2018/10/21/leyou/day15-bi-ji/day15-rabbitmq-ji-shu-ju-tong-bu/1532765689904.png" alt="1532765689904"></p><p>再次测试：</p><p><img src="/2018/10/21/leyou/day15-bi-ji/day15-rabbitmq-ji-shu-ju-tong-bu/1527086159534.png" alt="1527086159534"></p><h2 id="2-3-订阅模型分类"><a href="#2-3-订阅模型分类" class="headerlink" title="2.3.订阅模型分类"></a>2.3.订阅模型分类</h2><p>在之前的模式中，我们创建了一个工作队列。 工作队列背后的假设是：每个任务只被传递给一个工作人员。 在这一部分，我们将做一些完全不同的事情 - 我们将会传递一个信息给多个消费者。 这种模式被称为“发布/订阅”。 </p><p>订阅模型示意图：</p><p> <img src="/2018/10/21/leyou/day15-bi-ji/day15-rabbitmq-ji-shu-ju-tong-bu/1527086284940.png" alt="1527086284940"></p><p>解读：</p><p>1、1个生产者，多个消费者</p><p>2、每一个消费者都有自己的一个队列</p><p>3、生产者没有将消息直接发送到队列，而是发送